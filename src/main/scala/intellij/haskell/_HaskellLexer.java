/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 7, 4]
   * Total runtime size is 3136 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<7)|((ch>>4)&0x7f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\3\1\1\2\65\1\1\3\u01e5\1");

  /* The ZZ_CMAP_Y table has 512 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\55\1\1\13\1\14\1\15\1"+
    "\16\304\1\1\17\1\20\4\1\2\21\7\1\1\22\1\23\1\24\6\1\1\25\3\1\1\26\2\1\1\27"+
    "\1\30\1\1\1\31\2\1\1\32\2\1\1\33\2\1\1\34\63\1\1\35\144\1\1\36\20\1\1\37\51"+
    "\1");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\3\3\0\1\3\1\2\2\3\1\1\22\0\1\36\1\72\1\71\1\4\2\72\1\42\1\70\1\112"+
    "\1\113\1\73\1\74\1\114\1\25\1\35\1\72\1\30\4\64\3\33\2\23\1\105\1\115\1\76"+
    "\1\101\1\77\1\100\1\102\1\54\1\57\1\55\1\27\1\37\1\60\1\67\1\51\1\63\1\22"+
    "\1\56\1\47\1\66\1\45\1\34\1\63\1\53\1\62\1\50\1\52\1\46\1\61\1\22\1\32\1\65"+
    "\1\22\1\116\1\20\1\40\1\44\1\41\1\117\1\26\1\124\1\16\1\7\1\10\1\6\1\125\1"+
    "\134\1\5\2\21\1\12\1\132\1\11\1\15\1\131\1\21\1\14\1\13\1\127\1\17\1\43\1"+
    "\133\1\31\1\130\1\21\1\120\1\103\1\121\1\104\6\0\1\126\12\0\1\3\5\0\1\73\20"+
    "\0\1\73\7\0\1\73\1\0\31\22\7\0\31\21\12\0\1\73\23\0\2\126\6\0\12\24\10\0\1"+
    "\22\22\0\1\22\7\0\1\22\6\0\1\22\13\0\1\107\1\0\1\110\17\0\1\111\15\0\1\122"+
    "\27\0\1\75\16\0\1\106\13\0\3\73\26\0\1\73\11\0\1\123\16\0\1\73\20\0\1\21\20"+
    "\0\1\21\10\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7"+
    "\2\10\1\4\1\10\1\11\1\3\1\12\1\13\1\4"+
    "\1\14\1\15\3\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\3\5\10\40\5\0"+
    "\1\4\1\41\1\42\3\5\1\43\4\5\1\44\2\5"+
    "\3\0\1\45\5\0\1\22\1\0\1\46\4\0\1\47"+
    "\1\50\4\5\1\51\1\52\1\53\1\0\1\54\3\0"+
    "\1\55\1\56\6\0\1\57\11\5\1\60\2\5\1\0"+
    "\1\61\1\0\1\61\3\45\1\62\1\63\1\64\17\0"+
    "\1\22\20\0\1\65\1\66\4\5\1\0\1\67\1\56"+
    "\7\0\6\5\1\70\1\71\2\5\1\72\1\0\1\45"+
    "\1\73\1\45\27\0\1\74\1\75\2\5\1\56\3\0"+
    "\1\76\6\5\1\77\4\0\1\5\1\100\1\0\1\101"+
    "\1\102\1\5\1\103\4\5\5\0\1\104\2\5\1\105"+
    "\1\5\1\106\2\0\1\73\2\0\1\107\1\0\1\110"+
    "\2\0\2\73\23\0\1\111\2\0\1\45\5\0\1\112"+
    "\1\113\1\114\3\0\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\135\0\272\0\u0117\0\u0174\0\u01d1\0\u0174\0\u022e"+
    "\0\u028b\0\u02e8\0\u0345\0\u03a2\0\u03ff\0\u045c\0\u04b9\0\u0516"+
    "\0\u0573\0\u05d0\0\u062d\0\u068a\0\u06e7\0\u0744\0\u07a1\0\u07fe"+
    "\0\u0174\0\u085b\0\u0174\0\u0516\0\u08b8\0\u0915\0\u0972\0\u09cf"+
    "\0\u0a2c\0\u0a89\0\u0ae6\0\u08b8\0\u08b8\0\u08b8\0\u0b43\0\u08b8"+
    "\0\u08b8\0\u08b8\0\u08b8\0\u0174\0\u0174\0\u0174\0\u0174\0\u0ba0"+
    "\0\u0174\0\u0bfd\0\u0174\0\u0174\0\u0c5a\0\u0cb7\0\u0d14\0\u0174"+
    "\0\u0d71\0\u0dce\0\u0e2b\0\u0e88\0\u0ee5\0\u0f42\0\u0f9f\0\u0ffc"+
    "\0\u1059\0\u10b6\0\u1113\0\u1170\0\u11cd\0\u0516\0\u122a\0\u1287"+
    "\0\u12e4\0\u1341\0\u0516\0\u139e\0\u13fb\0\u1458\0\u14b5\0\u0516"+
    "\0\u1512\0\u156f\0\u15cc\0\u1629\0\u1686\0\u16e3\0\u1740\0\u179d"+
    "\0\u17fa\0\u1857\0\u18b4\0\u1911\0\u0972\0\u0174\0\u196e\0\u19cb"+
    "\0\u0ba0\0\u1a28\0\u0174\0\u1a85\0\u1ae2\0\u1b3f\0\u1b9c\0\u1bf9"+
    "\0\u0174\0\u0174\0\u0174\0\u1c56\0\u0174\0\u1cb3\0\u0f9f\0\u1d10"+
    "\0\u0174\0\u1d6d\0\u1dca\0\u1e27\0\u1e84\0\u1ee1\0\u1f3e\0\u1f9b"+
    "\0\u0174\0\u1ff8\0\u2055\0\u20b2\0\u210f\0\u216c\0\u21c9\0\u2226"+
    "\0\u2283\0\u22e0\0\u0516\0\u233d\0\u239a\0\u23f7\0\u2454\0\u2454"+
    "\0\u24b1\0\u250e\0\u256b\0\u25c8\0\u179d\0\u17fa\0\u0174\0\u2625"+
    "\0\u2682\0\u26df\0\u273c\0\u2799\0\u27f6\0\u2853\0\u28b0\0\u290d"+
    "\0\u296a\0\u29c7\0\u2a24\0\u2a81\0\u2ade\0\u2b3b\0\u2b98\0\u2bf5"+
    "\0\u2c52\0\u2caf\0\u2d0c\0\u2d69\0\u2dc6\0\u2e23\0\u2e80\0\u2edd"+
    "\0\u2f3a\0\u2f97\0\u2ff4\0\u3051\0\u30ae\0\u310b\0\u3168\0\u0174"+
    "\0\u0174\0\u31c5\0\u3222\0\u327f\0\u32dc\0\u3339\0\u0174\0\u3396"+
    "\0\u33f3\0\u3450\0\u34ad\0\u350a\0\u3567\0\u35c4\0\u3621\0\u367e"+
    "\0\u36db\0\u3738\0\u3795\0\u37f2\0\u384f\0\u0516\0\u0516\0\u38ac"+
    "\0\u3909\0\u0516\0\u3966\0\u39c3\0\u3a20\0\u3a7d\0\u3ada\0\u3b37"+
    "\0\u3b94\0\u3bf1\0\u3c4e\0\u3cab\0\u3d08\0\u3d65\0\u3dc2\0\u3e1f"+
    "\0\u3e7c\0\u3ed9\0\u3f36\0\u3f93\0\u3ff0\0\u404d\0\u40aa\0\u4107"+
    "\0\u4164\0\u41c1\0\u421e\0\u427b\0\u42d8\0\u4335\0\u0516\0\u4392"+
    "\0\u43ef\0\u444c\0\u44a9\0\u4506\0\u4563\0\u45c0\0\u461d\0\u467a"+
    "\0\u46d7\0\u4734\0\u4791\0\u47ee\0\u0516\0\u484b\0\u48a8\0\u4905"+
    "\0\u4962\0\u49bf\0\u0516\0\u4a1c\0\u0516\0\u0516\0\u4a79\0\u0516"+
    "\0\u4ad6\0\u4b33\0\u4b90\0\u4bed\0\u4c4a\0\u4ca7\0\u4d04\0\u4d61"+
    "\0\u4dbe\0\u0516\0\u4e1b\0\u4e78\0\u0516\0\u4ed5\0\u0516\0\u4f32"+
    "\0\u4f8f\0\u4fec\0\u5049\0\u50a6\0\u0516\0\u5103\0\u0516\0\u5160"+
    "\0\u51bd\0\u521a\0\u5277\0\u52d4\0\u5331\0\u538e\0\u53eb\0\u5448"+
    "\0\u54a5\0\u5502\0\u555f\0\u55bc\0\u5619\0\u5676\0\u56d3\0\u5730"+
    "\0\u578d\0\u57ea\0\u5847\0\u58a4\0\u5901\0\u595e\0\u0174\0\u59bb"+
    "\0\u5a18\0\u0174\0\u5a75\0\u5ad2\0\u5b2f\0\u5b8c\0\u5be9\0\u0174"+
    "\0\u0174\0\u0174\0\u5c46\0\u5ca3\0\u5d00\0\u5d5d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\20\1\21\1\22\1\20\1\23"+
    "\1\20\1\24\1\25\1\26\1\27\1\20\1\24\1\30"+
    "\1\20\1\24\1\25\1\24\1\31\1\32\1\24\1\33"+
    "\1\34\1\35\1\20\1\35\17\24\1\25\3\24\1\36"+
    "\1\37\2\35\1\40\1\31\1\41\1\35\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\5\2\20\1\5\1\65\2\20\1\66\1\67"+
    "\1\20\1\70\1\71\23\70\1\72\72\70\1\73\5\70"+
    "\1\0\7\70\1\71\23\70\1\74\72\70\1\75\5\70"+
    "\1\0\7\70\1\71\101\70\1\76\12\70\1\77\7\70"+
    "\1\0\6\70\136\0\1\10\1\7\1\10\32\0\1\10"+
    "\77\0\1\10\1\0\1\10\32\0\1\10\77\0\1\100"+
    "\1\0\1\100\1\35\1\101\1\0\1\102\1\103\6\0"+
    "\1\104\1\35\4\0\1\105\7\0\1\35\1\100\3\0"+
    "\1\35\1\0\1\35\25\0\14\35\34\0\1\20\1\106"+
    "\2\20\1\107\6\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\3\20\1\110\2\20\5\0\10\20\1\111"+
    "\2\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\5\0\3\20\1\112\4\20\1\113\2\20\1\0"+
    "\4\20\1\0\1\114\6\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\5\0\5\20\1\115\5\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\5\0\3\20\1\116\7\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\5\0\3\20\1\117\7\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\5\0\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\5\0\1\20"+
    "\1\120\11\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\5\0\5\20\1\121\5\20\1\0\4\20"+
    "\1\0\1\122\6\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\35\13\0\1\35\4\0\1\35\7\0\1\35\4\0"+
    "\1\35\1\0\1\35\25\0\14\35\16\0\1\123\15\0"+
    "\13\24\1\0\4\24\1\0\7\24\2\0\1\24\1\0"+
    "\1\24\1\0\1\24\1\0\24\24\33\0\2\24\1\0"+
    "\6\24\10\0\1\124\12\0\1\25\1\26\3\0\1\25"+
    "\2\0\1\25\1\0\1\125\1\0\1\124\24\0\1\25"+
    "\73\0\2\26\3\0\1\26\2\0\1\26\30\0\1\26"+
    "\54\0\1\35\13\0\1\35\2\0\1\25\1\26\1\126"+
    "\2\0\1\25\2\0\1\25\1\0\1\35\1\127\3\0"+
    "\1\35\1\0\1\35\17\0\1\25\5\0\5\35\1\52"+
    "\6\35\37\0\1\124\4\0\1\130\5\0\1\25\1\26"+
    "\3\0\1\25\2\131\1\25\1\130\1\125\1\0\1\124"+
    "\24\0\1\25\51\0\1\10\1\0\1\10\31\0\1\125"+
    "\1\10\102\0\1\35\13\0\1\35\4\0\1\35\7\0"+
    "\1\35\4\0\1\35\1\0\1\35\25\0\14\35\27\0"+
    "\2\132\1\0\15\132\1\133\47\132\1\0\14\132\1\134"+
    "\27\132\2\135\1\136\15\135\1\137\50\135\1\136\43\135"+
    "\4\0\1\35\13\0\1\35\2\0\1\25\1\26\1\35"+
    "\2\0\1\25\2\0\1\25\1\0\1\35\1\127\3\0"+
    "\1\35\1\0\1\35\17\0\1\25\5\0\14\35\33\0"+
    "\1\35\13\0\1\35\4\0\1\51\7\0\1\35\4\0"+
    "\1\35\1\0\1\35\25\0\14\35\33\0\1\35\13\20"+
    "\1\35\1\20\3\0\1\35\1\20\2\0\1\20\3\0"+
    "\1\35\3\0\1\20\1\35\1\20\1\35\25\0\14\35"+
    "\16\0\2\20\1\0\6\20\4\0\1\35\13\0\1\35"+
    "\4\0\1\35\7\0\1\35\4\0\1\35\1\0\1\35"+
    "\25\0\5\35\1\53\6\35\33\0\1\35\13\0\1\35"+
    "\4\0\1\35\7\0\1\35\4\0\1\35\1\0\1\35"+
    "\25\0\13\35\1\50\34\0\13\140\1\0\2\140\3\0"+
    "\2\140\1\0\2\140\1\0\1\140\1\141\1\0\1\140"+
    "\1\0\1\140\1\0\1\140\1\0\17\140\1\0\3\140"+
    "\5\0\1\141\2\0\1\142\2\0\1\143\20\0\2\140"+
    "\1\0\6\140\25\0\1\144\114\0\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\1\20\1\145\3\20"+
    "\1\146\5\0\10\20\1\147\2\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\5\0\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\5\20\1\150"+
    "\2\0\1\70\253\0\1\151\40\0\1\152\230\0\1\153"+
    "\40\0\1\154\147\0\1\155\101\0\13\156\1\0\2\156"+
    "\3\0\2\156\1\0\2\156\1\0\1\156\1\157\1\0"+
    "\1\156\1\0\1\156\1\0\1\156\1\0\17\156\1\0"+
    "\3\156\5\0\1\157\2\0\1\160\2\0\1\161\20\0"+
    "\2\156\1\0\6\156\1\0\1\100\1\0\1\100\1\0"+
    "\1\101\1\0\1\102\1\103\6\0\1\104\16\0\1\100"+
    "\104\0\1\162\2\0\1\163\133\0\1\164\135\0\1\165"+
    "\1\166\1\0\1\167\131\0\1\170\127\0\1\35\13\0"+
    "\1\35\4\0\1\35\7\0\1\35\4\0\1\35\1\0"+
    "\1\35\25\0\14\35\13\0\1\171\20\0\1\20\1\172"+
    "\4\20\1\173\4\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\13\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\2\20\1\174\3\20\5\0"+
    "\7\20\1\175\3\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\1\20\1\176\5\20\1\177"+
    "\3\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\5\0\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\1\200\5\20\5\0\6\20\1\201\4\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\5\0\13\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\4\20\1\202\1\20\5\0\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\1\203\5\20\5\0"+
    "\13\20\1\0\4\20\1\0\1\204\6\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\5\0\6\20\1\205\4\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\10\0\1\206"+
    "\147\0\1\207\1\0\1\210\2\0\1\207\2\0\1\207"+
    "\30\0\1\207\7\0\1\210\63\0\1\211\4\0\1\211"+
    "\2\0\1\211\30\0\1\211\50\0\1\212\1\213\1\0"+
    "\1\214\1\35\30\212\1\35\1\214\3\212\1\35\27\212"+
    "\1\35\1\212\1\35\1\212\5\35\20\212\1\0\11\212"+
    "\35\0\1\125\127\0\1\215\2\0\1\215\30\0\1\215"+
    "\56\0\3\216\5\0\1\216\4\0\1\216\2\0\3\216"+
    "\2\0\1\216\3\0\1\216\14\0\2\216\1\0\2\216"+
    "\3\0\1\216\37\0\1\216\100\0\1\217\52\0\1\132"+
    "\2\0\1\132\2\0\1\132\1\220\2\0\1\132\2\0"+
    "\2\221\1\0\1\132\1\222\1\221\1\223\1\0\1\221"+
    "\3\0\1\224\2\0\2\132\1\225\1\226\1\227\1\230"+
    "\1\231\1\232\2\0\1\233\1\234\1\0\1\235\1\236"+
    "\1\232\1\227\1\0\1\221\2\0\1\227\2\132\32\0"+
    "\1\132\2\0\1\132\11\0\1\237\13\0\1\237\4\0"+
    "\1\237\7\0\1\237\4\0\1\237\1\0\1\237\23\0"+
    "\1\217\1\0\14\237\30\0\3\240\2\0\1\135\2\0"+
    "\1\135\2\0\1\135\1\241\2\0\1\135\2\0\2\135"+
    "\1\0\1\135\1\242\1\135\1\243\1\0\1\135\2\0"+
    "\1\240\1\244\2\0\2\135\1\245\1\246\1\247\1\250"+
    "\1\251\1\252\2\0\1\253\1\254\1\0\1\255\1\256"+
    "\1\252\1\247\1\0\1\135\2\0\1\247\2\135\32\0"+
    "\1\135\2\0\1\135\12\0\13\140\1\0\4\140\1\0"+
    "\7\140\1\141\1\0\1\140\1\0\1\140\1\0\1\140"+
    "\1\0\24\140\4\0\1\141\2\0\1\142\2\0\1\143"+
    "\20\0\2\140\1\0\6\140\5\0\13\140\1\0\1\140"+
    "\4\0\1\140\2\0\1\140\7\0\1\140\1\0\1\140"+
    "\60\0\2\140\1\0\6\140\1\0\1\257\1\0\1\257"+
    "\1\260\31\0\1\257\44\0\1\261\36\0\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\2\20\1\262"+
    "\3\20\5\0\3\20\1\263\7\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\5\0\2\20\1\264"+
    "\10\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\5\0\3\20\1\265\7\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\1\0\1\266\1\0"+
    "\1\266\32\0\1\266\44\0\1\267\36\0\13\156\1\0"+
    "\4\156\1\0\7\156\1\157\1\0\1\156\1\0\1\156"+
    "\1\0\1\156\1\0\24\156\4\0\1\157\2\0\1\160"+
    "\2\0\1\161\20\0\2\156\1\0\6\156\5\0\13\156"+
    "\1\0\1\156\4\0\1\156\2\0\1\156\7\0\1\156"+
    "\1\0\1\156\60\0\2\156\1\0\6\156\1\162\2\0"+
    "\15\162\1\270\114\162\16\0\1\271\124\0\1\272\135\0"+
    "\1\273\132\0\1\274\5\0\1\275\135\0\1\276\127\0"+
    "\1\277\132\0\1\300\12\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\5\0\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\1\301\5\20\5\0"+
    "\10\20\1\302\2\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\3\20\1\303\7\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\5\0"+
    "\13\20\1\0\4\20\1\0\1\304\6\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\5\0\1\305\12\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\5\0\13\20\1\0"+
    "\4\20\1\0\1\306\6\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\5\0\3\20\1\307\7\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\5\0\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\1\310\5\20\5\0"+
    "\6\20\1\311\4\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\3\20\1\312\7\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\125\0"+
    "\1\313\32\0\1\207\4\0\1\207\2\0\1\207\30\0"+
    "\1\207\60\0\1\124\12\0\1\211\4\0\1\211\2\0"+
    "\1\211\3\0\1\124\24\0\1\211\50\0\1\212\2\0"+
    "\132\212\1\0\1\314\1\0\1\314\32\0\1\314\5\0"+
    "\1\315\36\0\1\315\31\0\1\212\1\314\1\0\1\316"+
    "\32\212\1\316\5\212\1\315\36\212\1\315\31\212\30\0"+
    "\1\317\2\0\1\317\30\0\1\317\73\0\2\221\3\0"+
    "\1\221\2\0\1\221\30\0\1\221\3\0\1\217\103\0"+
    "\1\320\7\0\1\321\5\0\1\322\65\0\3\323\5\0"+
    "\1\323\4\0\1\323\2\0\3\323\2\0\1\323\3\0"+
    "\1\323\14\0\2\323\1\0\2\323\3\0\1\323\37\0"+
    "\1\323\44\0\1\232\10\0\1\324\2\0\1\325\1\0"+
    "\1\326\13\0\1\132\66\0\1\132\1\0\1\132\4\0"+
    "\1\132\2\0\1\132\1\0\1\132\2\0\3\132\2\0"+
    "\20\132\1\0\3\132\12\0\1\132\13\0\1\132\64\0"+
    "\1\320\5\0\1\327\130\0\1\132\144\0\1\132\110\0"+
    "\1\330\11\0\1\331\3\0\1\332\10\0\1\132\1\0"+
    "\1\333\121\0\1\132\137\0\1\327\133\0\1\333\5\0"+
    "\1\132\111\0\1\320\10\0\1\132\134\0\1\132\7\0"+
    "\1\132\60\0\1\237\13\0\1\237\4\0\1\237\7\0"+
    "\1\237\4\0\1\237\1\0\1\237\25\0\14\237\30\0"+
    "\3\240\14\0\1\135\15\0\1\240\126\0\1\135\2\0"+
    "\1\135\30\0\1\135\107\0\1\334\7\0\1\335\5\0"+
    "\1\336\65\0\3\135\5\0\1\135\4\0\1\135\2\0"+
    "\3\135\2\0\1\135\3\0\1\135\14\0\2\135\1\0"+
    "\2\135\3\0\1\135\37\0\1\135\44\0\1\252\10\0"+
    "\1\337\2\0\1\340\1\0\1\341\13\0\1\135\66\0"+
    "\1\135\1\0\1\135\4\0\1\135\2\0\1\135\1\0"+
    "\1\135\2\0\3\135\2\0\20\135\1\0\3\135\12\0"+
    "\1\135\13\0\1\135\64\0\1\334\5\0\1\342\130\0"+
    "\1\135\144\0\1\135\110\0\1\135\11\0\1\343\3\0"+
    "\1\344\10\0\1\135\1\0\1\345\121\0\1\135\137\0"+
    "\1\342\133\0\1\345\5\0\1\135\111\0\1\334\10\0"+
    "\1\135\134\0\1\135\7\0\1\135\157\0\1\261\36\0"+
    "\3\20\1\346\7\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\4\20\1\347\6\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\5\0"+
    "\12\20\1\350\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\5\0\7\20\1\351\3\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\103\0\1\267"+
    "\31\0\1\162\1\352\16\162\1\270\114\162\12\0\1\353"+
    "\127\0\1\354\134\0\1\274\135\0\1\162\136\0\1\162"+
    "\141\0\1\355\127\0\1\274\131\0\13\20\1\0\4\20"+
    "\1\0\3\20\1\356\3\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\5\0\13\20\1\0\4\20\1\0\1\357\6\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\7\20\1\360\3\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\5\0"+
    "\1\361\12\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\5\0\12\20\1\362\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\5\0\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\363\1\0\24\20\33\0\2\20\1\0\6\20\5\0"+
    "\13\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\1\20\1\364\4\20\5\0\6\20\1\365\4\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\5\0"+
    "\1\366\130\0\1\314\1\0\1\314\32\0\1\314\76\0"+
    "\1\315\1\367\1\370\132\315\1\212\1\314\1\0\1\316"+
    "\32\212\1\316\76\212\30\0\1\317\2\0\1\317\30\0"+
    "\1\317\3\0\1\217\113\0\1\132\124\0\1\132\161\0"+
    "\1\132\56\0\3\323\5\0\1\323\4\0\1\323\2\0"+
    "\3\323\2\0\1\323\3\0\1\323\14\0\2\323\1\0"+
    "\2\323\3\0\1\323\3\0\1\217\33\0\1\323\63\0"+
    "\1\132\136\0\1\132\111\0\1\132\24\0\1\132\133\0"+
    "\1\132\127\0\1\132\16\0\1\217\123\0\1\132\107\0"+
    "\1\132\147\0\1\132\136\0\1\135\124\0\1\135\161\0"+
    "\1\135\123\0\1\135\136\0\1\135\111\0\1\135\24\0"+
    "\1\135\133\0\1\135\135\0\1\135\107\0\1\135\147\0"+
    "\1\135\74\0\13\20\1\0\4\20\1\0\7\20\1\0"+
    "\1\371\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\5\0\5\20\1\372\5\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\5\0\3\20\1\373\7\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\1\162\1\0\16\162\1\270"+
    "\114\162\17\0\1\374\126\0\1\275\137\0\1\162\125\0"+
    "\5\20\1\375\1\20\1\376\3\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\5\0\4\20\1\377"+
    "\6\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\5\0\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\1\u0100\5\20\5\0\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\1\20\1\u0101\1\0\6\20\5\0"+
    "\5\20\1\u0102\5\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\1\u0103\12\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\5\0\13\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\2\20"+
    "\1\u0104\3\20\11\0\1\u0105\124\0\3\370\14\0\1\u0106"+
    "\4\0\1\u0107\10\0\1\370\77\0\1\370\1\0\1\370"+
    "\14\0\1\u0106\4\0\1\u0107\10\0\1\370\103\0\1\u0108"+
    "\1\u0109\133\0\3\20\1\u010a\7\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\7\0\1\275\132\0"+
    "\11\20\1\u010b\1\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\4\20\1\u010c\6\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\5\0"+
    "\13\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\1\u010d\5\20\5\0\4\20\1\u010e\6\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\5\0\3\20"+
    "\1\u010f\7\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\120\0\1\u0110\140\0\1\u0111\35\0\1\u0112"+
    "\120\0\1\u0113\151\0\1\u0114\113\0\3\20\1\u0115\7\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\5\0\13\20\1\0\4\20\1\0\7\20\1\0\1\u0116"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\5\0\13\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\1\20\1\u0117\1\0\6\20\16\0\1\u0118"+
    "\126\0\1\u0119\124\0\1\315\1\u011a\1\370\1\u011b\1\0"+
    "\30\315\1\0\1\u011b\3\315\1\0\27\315\1\0\1\315"+
    "\1\0\1\315\5\0\20\315\1\0\11\315\13\0\1\u011c"+
    "\253\0\1\u011d\7\0\1\u011e\2\0\1\u011f\141\0\1\u0120"+
    "\244\0\1\u0121\10\0\1\u011a\1\370\1\u011a\14\0\1\u0106"+
    "\4\0\1\u0107\10\0\1\u011a\76\0\1\315\1\u011a\1\370"+
    "\1\u011b\32\315\1\u011b\76\315\127\0\1\u0122\12\0\1\u0123"+
    "\261\0\1\u0124\33\0\1\u0125\112\0\1\u0126\132\0\1\u0127"+
    "\155\0\1\u0128\120\0\1\u0129\253\0\1\u012a\134\0\1\u012b"+
    "\13\0\1\u012c\135\0\1\u012d\134\0\1\u012e\253\0\1\u012f"+
    "\21\0\1\u0130\134\0\1\u0131\240\0\1\u0132\133\0\1\u0133"+
    "\32\0\1\u0134\132\0\1\u0135\134\0\1\u0136\136\0\1\u0137"+
    "\126\0\1\u0138\253\0\1\u0139\134\0\1\u013a\22\0\1\u013b"+
    "\126\0\1\u013c\135\0\1\u013d\245\0\1\u013e\14\0\1\367"+
    "\1\370\132\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23994];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\21\1\1\11\1\1\1\11"+
    "\20\1\4\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\7\1\5\0\16\1\3\0\1\1\5\0\1\1\1\0"+
    "\1\11\4\0\1\11\5\1\3\11\1\0\1\11\3\0"+
    "\1\11\1\1\6\0\1\11\14\1\1\0\1\1\1\0"+
    "\6\1\1\11\17\0\1\1\20\0\2\11\4\1\1\0"+
    "\1\11\1\1\7\0\13\1\1\0\3\1\27\0\5\1"+
    "\3\0\10\1\4\0\2\1\1\0\10\1\5\0\6\1"+
    "\2\0\1\1\2\0\1\1\1\0\1\1\2\0\2\1"+
    "\23\0\1\11\2\0\1\11\5\0\3\11\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[318];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }
    private int commentStart;
    private int commentDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 319: break;
            case NHADDOCK: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 320: break;
            case QQ: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_QUASIQUOTE;
            }  // fall though
            case 321: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 77: break;
          case 2: 
            { return HS_NEWLINE;
            } 
            // fall through
          case 78: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 79: break;
          case 4: 
            { return HS_VARSYM_ID;
            } 
            // fall through
          case 80: break;
          case 5: 
            { return HS_VAR_ID;
            } 
            // fall through
          case 81: break;
          case 6: 
            { return HS_BACKSLASH;
            } 
            // fall through
          case 82: break;
          case 7: 
            { return HS_CON_ID;
            } 
            // fall through
          case 83: break;
          case 8: 
            { return HS_DECIMAL;
            } 
            // fall through
          case 84: break;
          case 9: 
            { return HS_DOT;
            } 
            // fall through
          case 85: break;
          case 10: 
            { return HS_RIGHT_BRACKET;
            } 
            // fall through
          case 86: break;
          case 11: 
            { return HS_UNDERSCORE;
            } 
            // fall through
          case 87: break;
          case 12: 
            { return HS_QUOTE;
            } 
            // fall through
          case 88: break;
          case 13: 
            { return HS_DOUBLE_QUOTE;
            } 
            // fall through
          case 89: break;
          case 14: 
            { return HS_EQUAL;
            } 
            // fall through
          case 90: break;
          case 15: 
            { return HS_AT;
            } 
            // fall through
          case 91: break;
          case 16: 
            { return HS_VERTICAL_BAR;
            } 
            // fall through
          case 92: break;
          case 17: 
            { return HS_TILDE;
            } 
            // fall through
          case 93: break;
          case 18: 
            { return HS_CONSYM_ID;
            } 
            // fall through
          case 94: break;
          case 19: 
            { return HS_COLON_COLON;
            } 
            // fall through
          case 95: break;
          case 20: 
            { return HS_LEFT_ARROW;
            } 
            // fall through
          case 96: break;
          case 21: 
            { return HS_RIGHT_ARROW;
            } 
            // fall through
          case 97: break;
          case 22: 
            { return HS_DOUBLE_RIGHT_ARROW;
            } 
            // fall through
          case 98: break;
          case 23: 
            { return HS_LEFT_PAREN;
            } 
            // fall through
          case 99: break;
          case 24: 
            { return HS_RIGHT_PAREN;
            } 
            // fall through
          case 100: break;
          case 25: 
            { return HS_COMMA;
            } 
            // fall through
          case 101: break;
          case 26: 
            { return HS_SEMICOLON;
            } 
            // fall through
          case 102: break;
          case 27: 
            { return HS_LEFT_BRACKET;
            } 
            // fall through
          case 103: break;
          case 28: 
            { return HS_BACKQUOTE;
            } 
            // fall through
          case 104: break;
          case 29: 
            { return HS_LEFT_BRACE;
            } 
            // fall through
          case 105: break;
          case 30: 
            { return HS_RIGHT_BRACE;
            } 
            // fall through
          case 106: break;
          case 31: 
            { return HS_FORALL;
            } 
            // fall through
          case 107: break;
          case 32: 
            { 
            } 
            // fall through
          case 108: break;
          case 33: 
            { return HS_IF;
            } 
            // fall through
          case 109: break;
          case 34: 
            { return HS_IN;
            } 
            // fall through
          case 110: break;
          case 35: 
            { return HS_DO;
            } 
            // fall through
          case 111: break;
          case 36: 
            { return HS_OF;
            } 
            // fall through
          case 112: break;
          case 37: 
            { return HS_COMMENT;
            } 
            // fall through
          case 113: break;
          case 38: 
            { return HS_STRING_LITERAL;
            } 
            // fall through
          case 114: break;
          case 39: 
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            } 
            // fall through
          case 115: break;
          case 40: 
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 116: break;
          case 41: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            } 
            // fall through
          case 117: break;
          case 42: 
            { commentDepth++;
            } 
            // fall through
          case 118: break;
          case 43: 
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            } 
            // fall through
          case 119: break;
          case 44: 
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            } 
            // fall through
          case 120: break;
          case 45: 
            { qqDepth++;
            } 
            // fall through
          case 121: break;
          case 46: 
            { return HS_DIRECTIVE;
            } 
            // fall through
          case 122: break;
          case 47: 
            { return HS_PRAGMA_END;
            } 
            // fall through
          case 123: break;
          case 48: 
            { return HS_LET;
            } 
            // fall through
          case 124: break;
          case 49: 
            { return HS_FLOAT;
            } 
            // fall through
          case 125: break;
          case 50: 
            { return HS_OCTAL;
            } 
            // fall through
          case 126: break;
          case 51: 
            { return HS_HEXADECIMAL;
            } 
            // fall through
          case 127: break;
          case 52: 
            { return HS_CHARACTER_LITERAL;
            } 
            // fall through
          case 128: break;
          case 53: 
            { return HS_PRAGMA_START;
            } 
            // fall through
          case 129: break;
          case 54: 
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            } 
            // fall through
          case 130: break;
          case 55: 
            { haddockDepth++;
            } 
            // fall through
          case 131: break;
          case 56: 
            { return HS_DATA;
            } 
            // fall through
          case 132: break;
          case 57: 
            { return HS_ELSE;
            } 
            // fall through
          case 133: break;
          case 58: 
            { return HS_CASE;
            } 
            // fall through
          case 134: break;
          case 59: 
            { return HS_HADDOCK;
            } 
            // fall through
          case 135: break;
          case 60: 
            { return HS_TYPE;
            } 
            // fall through
          case 136: break;
          case 61: 
            { return HS_THEN;
            } 
            // fall through
          case 137: break;
          case 62: 
            { return HS_INFIX;
            } 
            // fall through
          case 138: break;
          case 63: 
            { return HS_CLASS;
            } 
            // fall through
          case 139: break;
          case 64: 
            { return HS_WHERE;
            } 
            // fall through
          case 140: break;
          case 65: 
            { return HS_INFIXL;
            } 
            // fall through
          case 141: break;
          case 66: 
            { return HS_INFIXR;
            } 
            // fall through
          case 142: break;
          case 67: 
            { return HS_IMPORT;
            } 
            // fall through
          case 143: break;
          case 68: 
            { return HS_MODULE;
            } 
            // fall through
          case 144: break;
          case 69: 
            { return HS_DEFAULT;
            } 
            // fall through
          case 145: break;
          case 70: 
            { return HS_NEWTYPE;
            } 
            // fall through
          case 146: break;
          case 71: 
            { return HS_INSTANCE;
            } 
            // fall through
          case 147: break;
          case 72: 
            { return HS_DERIVING;
            } 
            // fall through
          case 148: break;
          case 73: 
            { return HS_TYPE_FAMILY;
            } 
            // fall through
          case 149: break;
          case 74: 
            { return HS_TYPE_INSTANCE;
            } 
            // fall through
          case 150: break;
          case 75: 
            { return HS_FOREIGN_IMPORT;
            } 
            // fall through
          case 151: break;
          case 76: 
            { return HS_FOREIGN_EXPORT;
            } 
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
