/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;
  public static final int OPTIONS_GHC = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 7, 5]
   * Total runtime size is 3424 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<7)|((ch>>5)&0x7f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\32\1\1\3\362\1");

  /* The ZZ_CMAP_Y table has 512 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\6\1\10\1\11\1\12\341\6\1\13\1\14\1\6\1"+
    "\15\1\16\3\6\1\17\1\20\2\6\1\21\1\6\1\22\1\6\1\23\1\24\1\6\1\25\1\26\1\27"+
    "\1\30\31\6\1\27\36\6\1\31\122\6\1\32\10\6\1\33\14\6\1\34\107\6");

  /* The ZZ_CMAP_A table has 928 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\3\3\0\1\4\1\2\2\4\1\1\22\0\1\41\1\75\1\74\1\5\2\75\1\45\1\73\1\115"+
    "\1\116\1\75\1\77\1\117\1\30\1\40\1\75\1\33\4\67\3\36\2\26\1\110\1\120\1\101"+
    "\1\104\1\102\1\103\1\105\1\57\1\62\1\60\1\32\1\42\1\63\1\72\1\54\1\66\1\24"+
    "\1\61\1\52\1\71\1\50\1\37\1\66\1\56\1\65\1\53\1\55\1\51\1\64\1\24\1\35\1\70"+
    "\1\24\1\121\1\21\1\43\1\47\1\44\1\122\1\31\1\127\1\17\1\10\1\11\1\7\1\130"+
    "\1\137\1\6\2\22\1\13\1\135\1\12\1\16\1\134\1\22\1\15\1\14\1\132\1\20\1\46"+
    "\1\136\1\34\1\133\1\22\1\123\1\106\1\124\1\107\6\0\1\131\32\0\1\4\5\0\1\76"+
    "\5\0\1\76\12\0\1\76\7\0\1\76\67\0\1\76\31\0\31\25\7\0\31\23\52\0\1\76\23\0"+
    "\2\131\22\0\1\76\23\0\12\27\6\0\12\27\30\0\1\25\22\0\1\25\4\0\1\25\2\0\1\25"+
    "\6\0\1\25\53\0\1\112\1\0\1\113\37\0\1\114\15\0\1\125\4\0\1\76\2\0\2\76\10"+
    "\0\1\76\5\0\1\100\12\0\2\76\2\0\2\76\16\0\1\111\10\0\6\76\10\0\2\76\45\0\1"+
    "\76\6\0\1\76\10\0\1\76\37\0\1\76\1\126\63\0\1\76\33\0\1\23\20\0\1\23\30\0"+
    "\1\76\37\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7"+
    "\2\10\1\4\1\10\1\11\1\3\1\12\1\13\1\4"+
    "\1\14\1\1\3\4\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\3\5\10\37\2\3"+
    "\1\0\1\40\2\0\1\41\5\0\1\4\1\42\1\43"+
    "\3\5\1\44\4\5\1\45\2\5\3\0\1\46\5\0"+
    "\1\21\1\47\4\0\1\50\1\51\4\5\1\52\1\53"+
    "\1\54\1\55\1\56\3\0\1\57\1\0\1\60\6\0"+
    "\1\61\11\5\1\62\2\5\1\0\1\63\1\0\1\63"+
    "\3\46\1\64\1\65\1\66\17\0\1\21\20\0\1\67"+
    "\1\70\4\5\1\71\1\60\7\0\6\5\1\72\1\73"+
    "\2\5\1\74\1\0\1\46\1\75\1\46\27\0\1\76"+
    "\1\77\2\5\1\60\3\0\1\100\6\5\1\101\4\0"+
    "\1\5\1\102\1\0\1\103\1\104\1\5\1\105\4\5"+
    "\5\0\1\106\2\5\1\107\1\5\1\110\2\0\1\75"+
    "\2\0\1\111\1\0\1\112\2\0\2\75\23\0\1\113"+
    "\2\0\1\46\5\0\1\114\1\115\1\116\3\0\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\140\0\300\0\u0120\0\u0180\0\u01e0\0\u0240\0\u01e0"+
    "\0\u02a0\0\u0300\0\u0360\0\u03c0\0\u0420\0\u0480\0\u04e0\0\u0540"+
    "\0\u05a0\0\u0600\0\u0660\0\u06c0\0\u0720\0\u0780\0\u07e0\0\u0840"+
    "\0\u08a0\0\u01e0\0\u0900\0\u01e0\0\u05a0\0\u0960\0\u09c0\0\u0a20"+
    "\0\u0a80\0\u0ae0\0\u0b40\0\u0ba0\0\u0960\0\u0960\0\u0960\0\u0c00"+
    "\0\u0960\0\u0960\0\u0960\0\u0960\0\u01e0\0\u01e0\0\u01e0\0\u01e0"+
    "\0\u0c60\0\u01e0\0\u0cc0\0\u01e0\0\u01e0\0\u0d20\0\u0d80\0\u0de0"+
    "\0\u01e0\0\u0e40\0\u0ea0\0\u0f00\0\u0f60\0\u0fc0\0\u1020\0\u1080"+
    "\0\u10e0\0\u1140\0\u11a0\0\u1200\0\u1260\0\u0a20\0\u01e0\0\u12c0"+
    "\0\u1320\0\u1380\0\u13e0\0\u1440\0\u14a0\0\u05a0\0\u1500\0\u1560"+
    "\0\u15c0\0\u1620\0\u05a0\0\u1680\0\u16e0\0\u1740\0\u17a0\0\u05a0"+
    "\0\u1800\0\u1860\0\u18c0\0\u1920\0\u1980\0\u19e0\0\u1a40\0\u1aa0"+
    "\0\u1b00\0\u1b60\0\u1bc0\0\u1c20\0\u01e0\0\u1c80\0\u1ce0\0\u0c60"+
    "\0\u1d40\0\u01e0\0\u1da0\0\u1e00\0\u1e60\0\u1ec0\0\u1f20\0\u01e0"+
    "\0\u01e0\0\u01e0\0\u01e0\0\u01e0\0\u1f80\0\u1080\0\u1fe0\0\u01e0"+
    "\0\u2040\0\u20a0\0\u2100\0\u2160\0\u21c0\0\u2220\0\u2280\0\u22e0"+
    "\0\u01e0\0\u2340\0\u23a0\0\u2400\0\u2460\0\u24c0\0\u2520\0\u2580"+
    "\0\u25e0\0\u2640\0\u05a0\0\u26a0\0\u2700\0\u2760\0\u27c0\0\u27c0"+
    "\0\u2820\0\u2880\0\u28e0\0\u2940\0\u1aa0\0\u1b00\0\u01e0\0\u29a0"+
    "\0\u2a00\0\u2a60\0\u2ac0\0\u2b20\0\u2b80\0\u2be0\0\u2c40\0\u2ca0"+
    "\0\u2d00\0\u2d60\0\u2dc0\0\u2e20\0\u2e80\0\u2ee0\0\u2f40\0\u2fa0"+
    "\0\u3000\0\u3060\0\u30c0\0\u3120\0\u3180\0\u31e0\0\u3240\0\u32a0"+
    "\0\u3300\0\u3360\0\u33c0\0\u3420\0\u3480\0\u34e0\0\u3540\0\u01e0"+
    "\0\u01e0\0\u35a0\0\u3600\0\u3660\0\u36c0\0\u01e0\0\u3720\0\u3780"+
    "\0\u37e0\0\u3840\0\u38a0\0\u3900\0\u3960\0\u39c0\0\u3a20\0\u3a80"+
    "\0\u3ae0\0\u3b40\0\u3ba0\0\u3c00\0\u05a0\0\u05a0\0\u3c60\0\u3cc0"+
    "\0\u05a0\0\u3d20\0\u3d80\0\u3de0\0\u3e40\0\u3ea0\0\u3f00\0\u3f60"+
    "\0\u3fc0\0\u4020\0\u4080\0\u40e0\0\u4140\0\u41a0\0\u4200\0\u4260"+
    "\0\u42c0\0\u4320\0\u4380\0\u43e0\0\u4440\0\u44a0\0\u4500\0\u4560"+
    "\0\u45c0\0\u4620\0\u4680\0\u46e0\0\u4740\0\u05a0\0\u47a0\0\u4800"+
    "\0\u4860\0\u48c0\0\u4920\0\u4980\0\u49e0\0\u4a40\0\u4aa0\0\u4b00"+
    "\0\u4b60\0\u4bc0\0\u4c20\0\u05a0\0\u4c80\0\u4ce0\0\u4d40\0\u4da0"+
    "\0\u4e00\0\u05a0\0\u4e60\0\u05a0\0\u05a0\0\u4ec0\0\u05a0\0\u4f20"+
    "\0\u4f80\0\u4fe0\0\u5040\0\u50a0\0\u5100\0\u5160\0\u51c0\0\u5220"+
    "\0\u05a0\0\u5280\0\u52e0\0\u05a0\0\u5340\0\u05a0\0\u53a0\0\u5400"+
    "\0\u5460\0\u54c0\0\u5520\0\u05a0\0\u5580\0\u05a0\0\u55e0\0\u5640"+
    "\0\u56a0\0\u5700\0\u5760\0\u57c0\0\u5820\0\u5880\0\u58e0\0\u5940"+
    "\0\u59a0\0\u5a00\0\u5a60\0\u5ac0\0\u5b20\0\u5b80\0\u5be0\0\u5c40"+
    "\0\u5ca0\0\u5d00\0\u5d60\0\u5dc0\0\u5e20\0\u01e0\0\u5e80\0\u5ee0"+
    "\0\u01e0\0\u5f40\0\u5fa0\0\u6000\0\u6060\0\u60c0\0\u01e0\0\u01e0"+
    "\0\u01e0\0\u6120\0\u6180\0\u61e0\0\u6240";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\2\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\2\21\1\22\1\23\1\21\1\24"+
    "\2\21\2\25\1\26\1\27\1\30\1\21\1\25\1\31"+
    "\1\21\1\25\1\26\1\25\1\32\1\33\1\25\1\34"+
    "\1\35\1\36\1\21\1\36\17\25\1\26\3\25\1\37"+
    "\1\40\2\36\1\41\1\36\1\42\1\36\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\6\2\21\1\6\1\66\2\21\1\67\1\70"+
    "\1\21\1\71\1\72\26\71\1\73\72\71\1\74\5\71"+
    "\1\0\7\71\1\72\26\71\1\75\72\71\1\76\5\71"+
    "\1\0\7\71\1\72\104\71\1\77\12\71\1\100\7\71"+
    "\1\0\6\71\1\0\2\101\1\102\1\101\1\103\13\104"+
    "\1\0\1\104\1\0\1\104\1\0\1\104\1\0\10\104"+
    "\1\0\1\101\1\104\1\0\1\104\1\0\1\104\1\0"+
    "\23\104\1\105\1\106\7\0\1\104\12\0\1\107\7\0"+
    "\2\104\1\0\6\104\141\0\1\11\1\10\2\11\34\0"+
    "\1\11\77\0\1\11\1\0\2\11\34\0\1\11\77\0"+
    "\1\110\1\0\2\110\1\36\1\111\1\0\1\112\1\113"+
    "\6\0\1\114\1\36\6\0\1\115\7\0\1\36\1\110"+
    "\3\0\1\36\1\0\1\36\25\0\14\36\35\0\1\21"+
    "\1\116\2\21\1\117\6\21\1\0\6\21\1\0\7\21"+
    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\24\21"+
    "\33\0\2\21\1\0\3\21\1\120\2\21\6\0\10\21"+
    "\1\121\2\21\1\0\6\21\1\0\7\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\6\21\6\0\3\21\1\122\4\21\1\123\2\21"+
    "\1\0\6\21\1\0\1\124\6\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\6\21\6\0\5\21\1\125\5\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\3\21\1\126"+
    "\7\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\6\21\6\0\3\21\1\127\7\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\13\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\6\21\6\0"+
    "\1\21\1\130\11\21\1\0\6\21\1\0\7\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\5\21\1\131\5\21\1\0"+
    "\6\21\1\0\1\132\6\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\6\21"+
    "\5\0\1\36\13\0\1\36\6\0\1\36\7\0\1\36"+
    "\4\0\1\36\1\0\1\36\25\0\14\36\16\0\1\133"+
    "\16\0\13\25\1\0\6\25\1\0\7\25\2\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\24\25\33\0\2\25"+
    "\1\0\6\25\11\0\1\134\14\0\1\26\1\27\3\0"+
    "\1\26\2\0\1\26\1\0\1\135\1\0\1\134\24\0"+
    "\1\26\76\0\2\27\3\0\1\27\2\0\1\27\30\0"+
    "\1\27\55\0\1\36\13\0\1\36\4\0\1\26\1\27"+
    "\1\136\2\0\1\26\2\0\1\26\1\0\1\36\1\137"+
    "\3\0\1\36\1\0\1\36\17\0\1\26\5\0\5\36"+
    "\1\53\6\36\40\0\1\134\4\0\1\140\7\0\1\26"+
    "\1\27\3\0\1\26\2\141\1\26\1\140\1\135\1\0"+
    "\1\134\24\0\1\26\51\0\1\11\1\0\2\11\33\0"+
    "\1\135\1\11\103\0\1\36\13\0\1\36\6\0\1\36"+
    "\7\0\1\36\4\0\1\36\1\0\1\36\25\0\14\36"+
    "\27\0\2\142\1\0\16\142\1\143\51\142\1\0\14\142"+
    "\1\144\27\142\2\106\1\145\16\106\1\146\52\106\1\145"+
    "\43\106\5\0\1\36\13\0\1\36\4\0\1\26\1\27"+
    "\1\36\2\0\1\26\2\0\1\26\1\0\1\36\1\137"+
    "\3\0\1\36\1\0\1\36\17\0\1\26\5\0\14\36"+
    "\34\0\1\36\13\0\1\36\6\0\1\52\7\0\1\36"+
    "\4\0\1\36\1\0\1\36\25\0\14\36\34\0\1\36"+
    "\13\21\1\36\2\21\4\0\1\36\1\21\2\0\1\21"+
    "\3\0\1\36\3\0\1\21\1\36\1\21\1\36\25\0"+
    "\14\36\16\0\2\21\1\0\6\21\5\0\1\36\13\0"+
    "\1\36\6\0\1\36\7\0\1\36\4\0\1\36\1\0"+
    "\1\36\25\0\5\36\1\54\6\36\34\0\1\36\13\0"+
    "\1\36\6\0\1\36\7\0\1\36\4\0\1\36\1\0"+
    "\1\36\25\0\13\36\1\51\35\0\13\147\1\0\4\147"+
    "\3\0\2\147\1\0\2\147\1\0\1\147\1\150\1\0"+
    "\1\147\1\0\1\147\1\0\1\147\1\0\17\147\1\0"+
    "\3\147\5\0\1\150\2\0\1\151\2\0\1\152\20\0"+
    "\2\147\1\0\6\147\30\0\1\153\115\0\13\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\1\21\1\154"+
    "\3\21\1\155\6\0\10\21\1\156\2\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\6\21\6\0\13\21"+
    "\1\0\6\21\1\0\7\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\5\21"+
    "\1\157\2\0\1\71\261\0\1\160\43\0\1\161\233\0"+
    "\1\162\43\0\1\163\152\0\1\164\102\0\13\165\1\0"+
    "\4\165\3\0\2\165\1\0\2\165\1\0\1\165\1\166"+
    "\1\0\1\165\1\0\1\165\1\0\1\165\1\0\17\165"+
    "\1\0\3\165\5\0\1\166\2\0\1\167\2\0\1\170"+
    "\20\0\2\165\1\0\6\165\1\0\2\101\1\102\1\101"+
    "\34\0\1\101\77\0\2\101\1\102\1\101\34\0\1\101"+
    "\1\0\1\101\124\0\1\171\115\0\13\104\1\0\1\104"+
    "\1\0\1\104\1\0\1\104\1\0\10\104\2\0\1\104"+
    "\1\0\1\104\1\0\1\104\1\0\23\104\11\0\1\104"+
    "\22\0\2\104\1\0\6\104\2\142\1\0\16\142\1\143"+
    "\51\142\1\0\44\142\1\0\1\110\1\0\2\110\1\0"+
    "\1\111\1\0\1\112\1\113\6\0\1\114\20\0\1\110"+
    "\105\0\1\172\2\0\1\173\136\0\1\174\140\0\1\175"+
    "\1\176\1\0\1\177\134\0\1\200\132\0\1\36\13\0"+
    "\1\36\6\0\1\36\7\0\1\36\4\0\1\36\1\0"+
    "\1\36\25\0\14\36\13\0\1\201\21\0\1\21\1\202"+
    "\4\21\1\203\4\21\1\0\6\21\1\0\7\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\13\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\2\21\1\204\3\21\6\0"+
    "\7\21\1\205\3\21\1\0\6\21\1\0\7\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\1\21\1\206\5\21\1\207"+
    "\3\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\6\21\6\0\13\21\1\0\6\21\1\0\7\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\1\210\5\21\6\0\6\21\1\211\4\21"+
    "\1\0\6\21\1\0\7\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\6\21"+
    "\6\0\13\21\1\0\6\21\1\0\7\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\4\21\1\212\1\21\6\0\13\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\1\213\5\21\6\0"+
    "\13\21\1\0\6\21\1\0\1\214\6\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\6\21\6\0\6\21\1\215\4\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\6\21\11\0\1\216"+
    "\154\0\1\217\1\0\1\220\2\0\1\217\2\0\1\217"+
    "\30\0\1\217\7\0\1\220\66\0\1\221\4\0\1\221"+
    "\2\0\1\221\30\0\1\221\50\0\1\222\1\223\1\0"+
    "\2\224\1\36\32\222\1\36\1\224\3\222\1\36\27\222"+
    "\1\36\1\222\1\36\1\222\5\36\20\222\1\0\11\222"+
    "\40\0\1\135\132\0\1\225\2\0\1\225\30\0\1\225"+
    "\57\0\3\226\5\0\1\226\6\0\1\226\2\0\3\226"+
    "\2\0\1\226\3\0\1\226\14\0\2\226\1\0\2\226"+
    "\3\0\1\226\37\0\1\226\103\0\1\227\53\0\1\142"+
    "\2\0\1\142\2\0\1\142\1\230\2\0\1\142\4\0"+
    "\2\231\1\0\1\142\1\232\1\231\1\233\1\0\1\231"+
    "\3\0\1\234\2\0\2\142\1\235\1\236\1\237\1\240"+
    "\1\241\1\242\2\0\1\243\1\244\1\0\1\245\1\246"+
    "\1\242\1\237\1\0\1\231\2\0\1\237\2\142\32\0"+
    "\1\142\2\0\1\142\12\0\1\247\13\0\1\247\6\0"+
    "\1\247\7\0\1\247\4\0\1\247\1\0\1\247\23\0"+
    "\1\227\1\0\14\247\30\0\4\250\2\0\1\106\2\0"+
    "\1\106\2\0\1\106\1\251\2\0\1\106\4\0\2\106"+
    "\1\0\1\106\1\252\1\106\1\253\1\0\1\106\2\0"+
    "\1\250\1\254\2\0\2\106\1\255\1\256\1\257\1\260"+
    "\1\261\1\262\2\0\1\263\1\264\1\0\1\265\1\266"+
    "\1\262\1\257\1\0\1\106\2\0\1\257\2\106\32\0"+
    "\1\106\2\0\1\106\13\0\13\147\1\0\6\147\1\0"+
    "\7\147\1\150\1\0\1\147\1\0\1\147\1\0\1\147"+
    "\1\0\24\147\4\0\1\150\2\0\1\151\2\0\1\152"+
    "\20\0\2\147\1\0\6\147\6\0\13\147\1\0\2\147"+
    "\5\0\1\147\2\0\1\147\7\0\1\147\1\0\1\147"+
    "\60\0\2\147\1\0\6\147\1\0\1\267\1\0\2\267"+
    "\1\270\33\0\1\267\44\0\1\271\37\0\13\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\2\21\1\272"+
    "\3\21\6\0\3\21\1\273\7\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\2\21\1\274"+
    "\10\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\6\21\6\0\3\21\1\275\7\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\13\165\1\0"+
    "\6\165\1\0\7\165\1\166\1\0\1\165\1\0\1\165"+
    "\1\0\1\165\1\0\24\165\4\0\1\166\2\0\1\167"+
    "\2\0\1\170\20\0\2\165\1\0\6\165\6\0\13\165"+
    "\1\0\2\165\5\0\1\165\2\0\1\165\7\0\1\165"+
    "\1\0\1\165\60\0\2\165\1\0\6\165\124\0\1\276"+
    "\13\0\1\172\2\0\16\172\1\277\116\172\17\0\1\300"+
    "\127\0\1\301\140\0\1\302\135\0\1\303\5\0\1\304"+
    "\140\0\1\305\132\0\1\306\135\0\1\307\12\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\6\21\6\0"+
    "\13\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\1\310\5\21\6\0\10\21\1\311\2\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\6\21\6\0\3\21"+
    "\1\312\7\21\1\0\6\21\1\0\7\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\6\21\6\0\13\21\1\0\6\21\1\0\1\313"+
    "\6\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\1\314\12\21"+
    "\1\0\6\21\1\0\7\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\6\21"+
    "\6\0\13\21\1\0\6\21\1\0\1\315\6\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\3\21\1\316\7\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\6\21\6\0"+
    "\13\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\1\317\5\21\6\0\6\21\1\320\4\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\6\21\6\0\3\21"+
    "\1\321\7\21\1\0\6\21\1\0\7\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\6\21\130\0\1\322\35\0\1\217\4\0\1\217"+
    "\2\0\1\217\30\0\1\217\61\0\1\134\14\0\1\221"+
    "\4\0\1\221\2\0\1\221\3\0\1\134\24\0\1\221"+
    "\50\0\1\222\2\0\135\222\1\0\1\323\1\0\2\323"+
    "\34\0\1\323\5\0\1\324\36\0\1\324\31\0\1\222"+
    "\1\323\1\0\2\325\34\222\1\325\5\222\1\324\36\222"+
    "\1\324\31\222\33\0\1\326\2\0\1\326\30\0\1\326"+
    "\76\0\2\231\3\0\1\231\2\0\1\231\30\0\1\231"+
    "\3\0\1\227\106\0\1\327\7\0\1\330\5\0\1\331"+
    "\66\0\3\332\5\0\1\332\6\0\1\332\2\0\3\332"+
    "\2\0\1\332\3\0\1\332\14\0\2\332\1\0\2\332"+
    "\3\0\1\332\37\0\1\332\47\0\1\242\10\0\1\333"+
    "\2\0\1\334\1\0\1\335\13\0\1\142\67\0\1\142"+
    "\2\0\2\142\4\0\1\142\2\0\1\142\1\0\1\142"+
    "\2\0\3\142\2\0\20\142\1\0\3\142\12\0\1\142"+
    "\13\0\1\142\67\0\1\327\5\0\1\336\133\0\1\142"+
    "\147\0\1\142\113\0\1\337\11\0\1\340\3\0\1\341"+
    "\10\0\1\142\1\0\1\342\124\0\1\142\142\0\1\336"+
    "\136\0\1\342\5\0\1\142\114\0\1\327\10\0\1\142"+
    "\137\0\1\142\7\0\1\142\61\0\1\247\13\0\1\247"+
    "\6\0\1\247\7\0\1\247\4\0\1\247\1\0\1\247"+
    "\25\0\14\247\30\0\4\250\14\0\1\106\17\0\1\250"+
    "\131\0\1\106\2\0\1\106\30\0\1\106\112\0\1\343"+
    "\7\0\1\344\5\0\1\345\66\0\3\106\5\0\1\106"+
    "\6\0\1\106\2\0\3\106\2\0\1\106\3\0\1\106"+
    "\14\0\2\106\1\0\2\106\3\0\1\106\37\0\1\106"+
    "\47\0\1\262\10\0\1\346\2\0\1\347\1\0\1\350"+
    "\13\0\1\106\67\0\1\106\2\0\2\106\4\0\1\106"+
    "\2\0\1\106\1\0\1\106\2\0\3\106\2\0\20\106"+
    "\1\0\3\106\12\0\1\106\13\0\1\106\67\0\1\343"+
    "\5\0\1\351\133\0\1\106\147\0\1\106\113\0\1\106"+
    "\11\0\1\352\3\0\1\353\10\0\1\106\1\0\1\354"+
    "\124\0\1\106\142\0\1\351\136\0\1\354\5\0\1\106"+
    "\114\0\1\343\10\0\1\106\137\0\1\106\7\0\1\106"+
    "\162\0\1\271\37\0\3\21\1\355\7\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\6\21\6\0\4\21"+
    "\1\356\6\21\1\0\6\21\1\0\7\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\6\21\6\0\12\21\1\357\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\7\21\1\360"+
    "\3\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\6\21\1\172\1\361\17\172\1\277\116\172\13\0\1\362"+
    "\132\0\1\363\137\0\1\303\140\0\1\172\141\0\1\172"+
    "\144\0\1\364\132\0\1\303\134\0\13\21\1\0\6\21"+
    "\1\0\3\21\1\365\3\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\6\21"+
    "\6\0\13\21\1\0\6\21\1\0\1\366\6\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\7\21\1\367\3\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\6\21\6\0"+
    "\1\370\12\21\1\0\6\21\1\0\7\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\6\21\6\0\12\21\1\371\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\13\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\372\1\0\24\21\33\0\2\21\1\0\6\21\6\0"+
    "\13\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\1\21\1\373\4\21\6\0\6\21\1\374\4\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\6\21\6\0"+
    "\1\375\132\0\1\323\1\0\2\323\34\0\1\323\76\0"+
    "\1\324\1\376\1\377\135\324\1\222\1\323\1\0\2\325"+
    "\34\222\1\325\76\222\33\0\1\326\2\0\1\326\30\0"+
    "\1\326\3\0\1\227\116\0\1\142\127\0\1\142\164\0"+
    "\1\142\57\0\3\332\5\0\1\332\6\0\1\332\2\0"+
    "\3\332\2\0\1\332\3\0\1\332\14\0\2\332\1\0"+
    "\2\332\3\0\1\332\3\0\1\227\33\0\1\332\66\0"+
    "\1\142\141\0\1\142\114\0\1\142\24\0\1\142\136\0"+
    "\1\142\132\0\1\142\16\0\1\227\126\0\1\142\112\0"+
    "\1\142\152\0\1\142\141\0\1\106\127\0\1\106\164\0"+
    "\1\106\126\0\1\106\141\0\1\106\114\0\1\106\24\0"+
    "\1\106\136\0\1\106\140\0\1\106\112\0\1\106\152\0"+
    "\1\106\75\0\13\21\1\0\6\21\1\0\7\21\1\0"+
    "\1\u0100\1\21\1\0\1\21\1\0\1\21\1\0\24\21"+
    "\33\0\2\21\1\0\6\21\6\0\5\21\1\u0101\5\21"+
    "\1\0\6\21\1\0\7\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\6\21"+
    "\6\0\3\21\1\u0102\7\21\1\0\6\21\1\0\7\21"+
    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\24\21"+
    "\33\0\2\21\1\0\6\21\1\172\1\0\17\172\1\277"+
    "\116\172\20\0\1\u0103\131\0\1\304\142\0\1\172\130\0"+
    "\5\21\1\u0104\1\21\1\u0105\3\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\6\0\4\21\1\u0106"+
    "\6\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\6\21\6\0\13\21\1\0\6\21\1\0\7\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\1\u0107\5\21\6\0\13\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\1\21\1\u0108\1\0\6\21\6\0"+
    "\5\21\1\u0109\5\21\1\0\6\21\1\0\7\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\1\u010a\12\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\6\21\6\0\13\21"+
    "\1\0\6\21\1\0\7\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\2\21"+
    "\1\u010b\3\21\12\0\1\u010c\126\0\4\377\14\0\1\u010d"+
    "\6\0\1\u010e\10\0\1\377\77\0\1\377\1\0\2\377"+
    "\14\0\1\u010d\6\0\1\u010e\10\0\1\377\104\0\1\u010f"+
    "\1\u0110\136\0\3\21\1\u0111\7\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\2\21\1\0\6\21\10\0\1\304\135\0"+
    "\11\21\1\u0112\1\21\1\0\6\21\1\0\7\21\2\0"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\4\21\1\u0113\6\21\1\0"+
    "\6\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0"+
    "\1\21\1\0\24\21\33\0\2\21\1\0\6\21\6\0"+
    "\13\21\1\0\6\21\1\0\7\21\2\0\1\21\1\0"+
    "\1\21\1\0\1\21\1\0\24\21\33\0\2\21\1\0"+
    "\1\u0114\5\21\6\0\4\21\1\u0115\6\21\1\0\6\21"+
    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21"+
    "\1\0\24\21\33\0\2\21\1\0\6\21\6\0\3\21"+
    "\1\u0116\7\21\1\0\6\21\1\0\7\21\2\0\1\21"+
    "\1\0\1\21\1\0\1\21\1\0\24\21\33\0\2\21"+
    "\1\0\6\21\123\0\1\u0117\143\0\1\u0118\40\0\1\u0119"+
    "\121\0\1\u011a\156\0\1\u011b\114\0\3\21\1\u011c\7\21"+
    "\1\0\6\21\1\0\7\21\2\0\1\21\1\0\1\21"+
    "\1\0\1\21\1\0\24\21\33\0\2\21\1\0\6\21"+
    "\6\0\13\21\1\0\6\21\1\0\7\21\1\0\1\u011d"+
    "\1\21\1\0\1\21\1\0\1\21\1\0\24\21\33\0"+
    "\2\21\1\0\6\21\6\0\13\21\1\0\6\21\1\0"+
    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0"+
    "\24\21\33\0\1\21\1\u011e\1\0\6\21\17\0\1\u011f"+
    "\131\0\1\u0120\126\0\1\324\1\u0121\1\377\2\u0122\1\0"+
    "\32\324\1\0\1\u0122\3\324\1\0\27\324\1\0\1\324"+
    "\1\0\1\324\5\0\20\324\1\0\11\324\14\0\1\u0123"+
    "\260\0\1\u0124\10\0\1\u0125\2\0\1\u0126\144\0\1\u0127"+
    "\251\0\1\u0128\10\0\1\u0121\1\377\2\u0121\14\0\1\u010d"+
    "\6\0\1\u010e\10\0\1\u0121\76\0\1\324\1\u0121\1\377"+
    "\2\u0122\34\324\1\u0122\76\324\132\0\1\u0129\13\0\1\u012a"+
    "\266\0\1\u012b\36\0\1\u012c\113\0\1\u012d\135\0\1\u012e"+
    "\162\0\1\u012f\121\0\1\u0130\260\0\1\u0131\137\0\1\u0132"+
    "\14\0\1\u0133\140\0\1\u0134\137\0\1\u0135\260\0\1\u0136"+
    "\22\0\1\u0137\137\0\1\u0138\245\0\1\u0139\136\0\1\u013a"+
    "\33\0\1\u013b\135\0\1\u013c\137\0\1\u013d\141\0\1\u013e"+
    "\131\0\1\u013f\260\0\1\u0140\137\0\1\u0141\23\0\1\u0142"+
    "\131\0\1\u0143\140\0\1\u0144\252\0\1\u0145\14\0\1\376"+
    "\1\377\135\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25248];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\1\1\1\11\21\1\1\11\1\1\1\11"+
    "\20\1\4\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\11\1\1\0\1\1\2\0\1\11\5\0\16\1\3\0"+
    "\1\1\5\0\1\1\1\11\4\0\1\11\5\1\5\11"+
    "\3\0\1\11\1\0\1\1\6\0\1\11\14\1\1\0"+
    "\1\1\1\0\6\1\1\11\17\0\1\1\20\0\2\11"+
    "\4\1\1\11\1\1\7\0\13\1\1\0\3\1\27\0"+
    "\5\1\3\0\10\1\4\0\2\1\1\0\10\1\5\0"+
    "\6\1\2\0\1\1\2\0\1\1\1\0\1\1\2\0"+
    "\2\1\23\0\1\11\2\0\1\11\5\0\3\11\3\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }
    private int commentStart;
    private int commentDepth;

    private int optionsGhcStart;
    private int optionsGhcDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 326: break;
            case NHADDOCK: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NOT_TERMINATED_COMMENT;
            }  // fall though
            case 327: break;
            case QQ: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_QUASIQUOTE;
            }  // fall though
            case 328: break;
            case OPTIONS_GHC: {
              yybegin(YYINITIAL);
        return HS_NOT_TERMINATED_OPTIONS_GHC;
            }  // fall though
            case 329: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 79: break;
          case 2: 
            { return HS_NEWLINE;
            } 
            // fall through
          case 80: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            } 
            // fall through
          case 81: break;
          case 4: 
            { return HS_VARSYM_ID;
            } 
            // fall through
          case 82: break;
          case 5: 
            { return HS_VAR_ID;
            } 
            // fall through
          case 83: break;
          case 6: 
            { return HS_BACKSLASH;
            } 
            // fall through
          case 84: break;
          case 7: 
            { return HS_CON_ID;
            } 
            // fall through
          case 85: break;
          case 8: 
            { return HS_DECIMAL;
            } 
            // fall through
          case 86: break;
          case 9: 
            { return HS_DOT;
            } 
            // fall through
          case 87: break;
          case 10: 
            { return HS_RIGHT_BRACKET;
            } 
            // fall through
          case 88: break;
          case 11: 
            { return HS_UNDERSCORE;
            } 
            // fall through
          case 89: break;
          case 12: 
            { return HS_QUOTE;
            } 
            // fall through
          case 90: break;
          case 13: 
            { return HS_EQUAL;
            } 
            // fall through
          case 91: break;
          case 14: 
            { return HS_AT;
            } 
            // fall through
          case 92: break;
          case 15: 
            { return HS_VERTICAL_BAR;
            } 
            // fall through
          case 93: break;
          case 16: 
            { return HS_TILDE;
            } 
            // fall through
          case 94: break;
          case 17: 
            { return HS_CONSYM_ID;
            } 
            // fall through
          case 95: break;
          case 18: 
            { return HS_COLON_COLON;
            } 
            // fall through
          case 96: break;
          case 19: 
            { return HS_LEFT_ARROW;
            } 
            // fall through
          case 97: break;
          case 20: 
            { return HS_RIGHT_ARROW;
            } 
            // fall through
          case 98: break;
          case 21: 
            { return HS_DOUBLE_RIGHT_ARROW;
            } 
            // fall through
          case 99: break;
          case 22: 
            { return HS_LEFT_PAREN;
            } 
            // fall through
          case 100: break;
          case 23: 
            { return HS_RIGHT_PAREN;
            } 
            // fall through
          case 101: break;
          case 24: 
            { return HS_COMMA;
            } 
            // fall through
          case 102: break;
          case 25: 
            { return HS_SEMICOLON;
            } 
            // fall through
          case 103: break;
          case 26: 
            { return HS_LEFT_BRACKET;
            } 
            // fall through
          case 104: break;
          case 27: 
            { return HS_BACKQUOTE;
            } 
            // fall through
          case 105: break;
          case 28: 
            { return HS_LEFT_BRACE;
            } 
            // fall through
          case 106: break;
          case 29: 
            { return HS_RIGHT_BRACE;
            } 
            // fall through
          case 107: break;
          case 30: 
            { return HS_FORALL;
            } 
            // fall through
          case 108: break;
          case 31: 
            { 
            } 
            // fall through
          case 109: break;
          case 32: 
            { return HS_ONE_PRAGMA;
            } 
            // fall through
          case 110: break;
          case 33: 
            { return HS_PRAGMA_SEP;
            } 
            // fall through
          case 111: break;
          case 34: 
            { return HS_IF;
            } 
            // fall through
          case 112: break;
          case 35: 
            { return HS_IN;
            } 
            // fall through
          case 113: break;
          case 36: 
            { return HS_DO;
            } 
            // fall through
          case 114: break;
          case 37: 
            { return HS_OF;
            } 
            // fall through
          case 115: break;
          case 38: 
            { return HS_COMMENT;
            } 
            // fall through
          case 116: break;
          case 39: 
            { return HS_STRING_LITERAL;
            } 
            // fall through
          case 117: break;
          case 40: 
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            } 
            // fall through
          case 118: break;
          case 41: 
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            } 
            // fall through
          case 119: break;
          case 42: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            } 
            // fall through
          case 120: break;
          case 43: 
            { commentDepth++;
            } 
            // fall through
          case 121: break;
          case 44: 
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            } 
            // fall through
          case 122: break;
          case 45: 
            { haddockDepth++;
            } 
            // fall through
          case 123: break;
          case 46: 
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            } 
            // fall through
          case 124: break;
          case 47: 
            { qqDepth++;
            } 
            // fall through
          case 125: break;
          case 48: 
            { return HS_DIRECTIVE;
            } 
            // fall through
          case 126: break;
          case 49: 
            { return HS_PRAGMA_END;
            } 
            // fall through
          case 127: break;
          case 50: 
            { return HS_LET;
            } 
            // fall through
          case 128: break;
          case 51: 
            { return HS_FLOAT;
            } 
            // fall through
          case 129: break;
          case 52: 
            { return HS_OCTAL;
            } 
            // fall through
          case 130: break;
          case 53: 
            { return HS_HEXADECIMAL;
            } 
            // fall through
          case 131: break;
          case 54: 
            { return HS_CHARACTER_LITERAL;
            } 
            // fall through
          case 132: break;
          case 55: 
            { yybegin(OPTIONS_GHC);
    return HS_PRAGMA_START;
            } 
            // fall through
          case 133: break;
          case 56: 
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            } 
            // fall through
          case 134: break;
          case 57: 
            { yybegin(YYINITIAL);
        return HS_PRAGMA_END;
            } 
            // fall through
          case 135: break;
          case 58: 
            { return HS_DATA;
            } 
            // fall through
          case 136: break;
          case 59: 
            { return HS_ELSE;
            } 
            // fall through
          case 137: break;
          case 60: 
            { return HS_CASE;
            } 
            // fall through
          case 138: break;
          case 61: 
            { return HS_HADDOCK;
            } 
            // fall through
          case 139: break;
          case 62: 
            { return HS_TYPE;
            } 
            // fall through
          case 140: break;
          case 63: 
            { return HS_THEN;
            } 
            // fall through
          case 141: break;
          case 64: 
            { return HS_INFIX;
            } 
            // fall through
          case 142: break;
          case 65: 
            { return HS_CLASS;
            } 
            // fall through
          case 143: break;
          case 66: 
            { return HS_WHERE;
            } 
            // fall through
          case 144: break;
          case 67: 
            { return HS_INFIXL;
            } 
            // fall through
          case 145: break;
          case 68: 
            { return HS_INFIXR;
            } 
            // fall through
          case 146: break;
          case 69: 
            { return HS_IMPORT;
            } 
            // fall through
          case 147: break;
          case 70: 
            { return HS_MODULE;
            } 
            // fall through
          case 148: break;
          case 71: 
            { return HS_DEFAULT;
            } 
            // fall through
          case 149: break;
          case 72: 
            { return HS_NEWTYPE;
            } 
            // fall through
          case 150: break;
          case 73: 
            { return HS_INSTANCE;
            } 
            // fall through
          case 151: break;
          case 74: 
            { return HS_DERIVING;
            } 
            // fall through
          case 152: break;
          case 75: 
            { return HS_TYPE_FAMILY;
            } 
            // fall through
          case 153: break;
          case 76: 
            { return HS_TYPE_INSTANCE;
            } 
            // fall through
          case 154: break;
          case 77: 
            { return HS_FOREIGN_IMPORT;
            } 
            // fall through
          case 155: break;
          case 78: 
            { return HS_FOREIGN_EXPORT;
            } 
            // fall through
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
