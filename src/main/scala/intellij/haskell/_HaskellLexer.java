/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 7, 5]
   * Total runtime size is 2400 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<7)|((ch>>5)&0x7f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\u010d\1");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\27\6\1\7\343\6\1\10\2\6\1\11\7\6\1\12\1\6\1\13\1"+
    "\6\1\14\1\15\1\6\1\16\1\17\33\6\1\20\117\6");

  /* The ZZ_CMAP_A table has 544 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\1\1\4\0\1\1\3\0\1\1\1\3\2\36\1\2\21\0\1\1\1\4\1\73\1\72\1\5\2\74\1\43\1\71"+
    "\1\114\1\115\1\74\1\75\1\116\1\26\1\76\1\74\1\31\4\65\3\34\2\24\1\107\1\117"+
    "\1\100\1\103\1\101\1\102\1\104\1\55\1\60\1\56\1\30\1\40\1\61\1\70\1\52\1\64"+
    "\1\23\1\57\1\50\1\67\1\46\1\35\1\64\1\54\1\63\1\51\1\53\1\47\1\62\1\23\1\33"+
    "\1\66\1\23\1\120\1\21\1\41\1\45\1\42\1\121\1\27\1\124\1\17\1\10\1\11\1\7\1"+
    "\125\1\133\1\6\2\22\1\13\1\131\1\12\1\16\1\130\1\22\1\15\1\14\1\126\1\20\1"+
    "\44\1\132\1\32\1\127\1\22\1\122\1\105\1\123\1\106\6\0\1\37\32\0\1\1\120\0"+
    "\2\22\11\0\1\22\13\0\2\37\26\0\12\25\46\0\1\111\1\0\1\112\37\0\1\113\45\0"+
    "\1\77\36\0\1\110\13\0\3\74\66\0\1\74\10\0\1\74\32\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\2\3\1\4\11\5\1\6\1\7"+
    "\2\10\1\4\1\10\1\11\1\12\1\4\1\13\1\1"+
    "\1\4\2\14\2\4\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\3\5\10\36\5\0\2\4"+
    "\1\5\1\37\1\40\3\5\1\41\4\5\1\42\2\5"+
    "\1\0\1\4\1\0\1\7\2\0\1\4\1\43\1\24"+
    "\1\44\4\0\1\21\1\0\1\45\1\0\1\46\1\23"+
    "\1\25\1\21\1\22\3\0\1\47\1\50\4\5\1\51"+
    "\1\52\1\53\1\0\1\54\3\0\1\55\1\56\6\0"+
    "\1\57\1\60\11\5\1\61\2\5\1\62\1\0\1\62"+
    "\1\0\2\43\1\63\1\64\1\65\37\0\2\66\1\67"+
    "\1\66\4\5\1\70\1\0\1\56\7\0\6\5\1\71"+
    "\1\72\2\5\1\73\1\0\1\74\27\0\2\75\1\76"+
    "\1\77\2\5\1\56\3\0\1\100\6\5\1\101\4\0"+
    "\1\5\1\102\1\0\1\103\1\104\1\5\1\105\4\5"+
    "\5\0\1\106\2\5\1\107\1\5\1\110\4\0\1\111"+
    "\1\0\1\112\25\0\1\113\2\0\1\43\5\0\1\114"+
    "\1\115\1\116\3\0\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\134\0\270\0\u0114\0\u0170\0\u01cc\0\u0228\0\u0170"+
    "\0\u0284\0\u02e0\0\u033c\0\u0398\0\u03f4\0\u0450\0\u04ac\0\u0508"+
    "\0\u0564\0\u05c0\0\u061c\0\u0678\0\u06d4\0\u0730\0\u078c\0\u07e8"+
    "\0\u0170\0\u0508\0\u0844\0\u08a0\0\u08fc\0\u0958\0\u09b4\0\u0170"+
    "\0\u0a10\0\u0a6c\0\u0ac8\0\u0844\0\u0844\0\u0844\0\u0b24\0\u0170"+
    "\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0b80"+
    "\0\u0170\0\u0bdc\0\u0170\0\u0c38\0\u0c94\0\u0cf0\0\u0170\0\u0d4c"+
    "\0\u0da8\0\u0e04\0\u0e60\0\u0ebc\0\u0f18\0\u0f74\0\u0fd0\0\u102c"+
    "\0\u1088\0\u10e4\0\u1140\0\u119c\0\u11f8\0\u1254\0\u0508\0\u12b0"+
    "\0\u130c\0\u1368\0\u13c4\0\u0508\0\u1420\0\u147c\0\u14d8\0\u1534"+
    "\0\u0508\0\u1590\0\u15ec\0\u1648\0\u16a4\0\u1700\0\u175c\0\u17b8"+
    "\0\u1814\0\u1870\0\u18cc\0\u0844\0\u0170\0\u1928\0\u1984\0\u19e0"+
    "\0\u1a3c\0\u1a98\0\u08fc\0\u0170\0\u1af4\0\u0170\0\u0844\0\u0844"+
    "\0\u1b50\0\u1b50\0\u1bac\0\u0b80\0\u1c08\0\u0170\0\u1c64\0\u1cc0"+
    "\0\u1d1c\0\u1d78\0\u1dd4\0\u0170\0\u0170\0\u0170\0\u1e30\0\u0170"+
    "\0\u1e8c\0\u0f74\0\u1ee8\0\u0170\0\u1f44\0\u1fa0\0\u1ffc\0\u2058"+
    "\0\u20b4\0\u2110\0\u216c\0\u0170\0\u21c8\0\u2224\0\u2280\0\u22dc"+
    "\0\u2338\0\u2394\0\u23f0\0\u244c\0\u24a8\0\u2504\0\u0508\0\u2560"+
    "\0\u25bc\0\u2618\0\u2674\0\u26d0\0\u26d0\0\u272c\0\u2788\0\u1928"+
    "\0\u1984\0\u0170\0\u27e4\0\u2840\0\u289c\0\u28f8\0\u2954\0\u29b0"+
    "\0\u2a0c\0\u2a68\0\u2ac4\0\u2b20\0\u2b7c\0\u2bd8\0\u2c34\0\u2c90"+
    "\0\u2cec\0\u2d48\0\u2da4\0\u2e00\0\u2e5c\0\u2eb8\0\u2f14\0\u2f70"+
    "\0\u2fcc\0\u3028\0\u3084\0\u30e0\0\u313c\0\u3198\0\u31f4\0\u3250"+
    "\0\u32ac\0\u0170\0\u3308\0\u0170\0\u3364\0\u33c0\0\u341c\0\u3478"+
    "\0\u34d4\0\u0170\0\u3530\0\u358c\0\u35e8\0\u3644\0\u36a0\0\u36fc"+
    "\0\u3758\0\u37b4\0\u3810\0\u386c\0\u38c8\0\u3924\0\u3980\0\u39dc"+
    "\0\u3a38\0\u0508\0\u0508\0\u3a94\0\u3af0\0\u0508\0\u3b4c\0\u3ba8"+
    "\0\u3c04\0\u3c60\0\u3cbc\0\u3d18\0\u3d74\0\u3dd0\0\u3e2c\0\u3e88"+
    "\0\u3ee4\0\u3f40\0\u3f9c\0\u3ff8\0\u4054\0\u40b0\0\u410c\0\u4168"+
    "\0\u41c4\0\u4220\0\u427c\0\u42d8\0\u4334\0\u4390\0\u43ec\0\u0170"+
    "\0\u4448\0\u44a4\0\u0508\0\u4500\0\u455c\0\u45b8\0\u4614\0\u4670"+
    "\0\u46cc\0\u4728\0\u4784\0\u47e0\0\u483c\0\u4898\0\u48f4\0\u4950"+
    "\0\u0508\0\u49ac\0\u4a08\0\u4a64\0\u4ac0\0\u4b1c\0\u0508\0\u4b78"+
    "\0\u0508\0\u0508\0\u4bd4\0\u0508\0\u4c30\0\u4c8c\0\u4ce8\0\u4d44"+
    "\0\u4da0\0\u4dfc\0\u4e58\0\u4eb4\0\u4f10\0\u0508\0\u4f6c\0\u4fc8"+
    "\0\u0508\0\u5024\0\u0508\0\u5080\0\u50dc\0\u5138\0\u5194\0\u0508"+
    "\0\u51f0\0\u0508\0\u524c\0\u52a8\0\u5304\0\u5360\0\u53bc\0\u5418"+
    "\0\u5474\0\u54d0\0\u552c\0\u5588\0\u55e4\0\u5640\0\u569c\0\u56f8"+
    "\0\u5754\0\u57b0\0\u580c\0\u5868\0\u58c4\0\u5920\0\u597c\0\u0170"+
    "\0\u59d8\0\u5a34\0\u0170\0\u5a90\0\u5aec\0\u5b48\0\u5ba4\0\u5c00"+
    "\0\u0170\0\u0170\0\u0170\0\u5c5c\0\u5cb8\0\u5d14\0\u5d70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\6\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\2\20\1\21\1\22\1\20"+
    "\1\23\1\20\1\24\1\25\1\26\1\27\1\20\1\24"+
    "\1\30\1\20\1\24\1\25\1\24\1\6\1\5\1\24"+
    "\1\31\1\32\1\33\1\20\1\33\17\24\1\25\3\24"+
    "\1\34\1\35\2\33\1\36\1\37\1\40\1\41\1\33"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\2\20\1\64\2\20\1\65\1\66\1\20"+
    "\2\67\1\70\23\67\1\71\10\67\1\0\62\67\1\72"+
    "\13\67\1\70\23\67\1\73\10\67\1\0\62\67\1\74"+
    "\13\67\1\70\34\67\1\0\45\67\1\75\12\67\1\76"+
    "\13\67\135\0\2\6\1\0\1\6\31\0\1\6\76\0"+
    "\2\6\1\10\1\6\31\0\1\6\76\0\2\77\1\0"+
    "\1\77\1\33\1\100\1\0\1\101\1\102\6\0\1\103"+
    "\1\33\4\0\1\104\7\0\1\77\4\0\1\33\1\0"+
    "\1\33\25\0\1\105\14\33\31\0\1\106\1\20\1\107"+
    "\2\20\1\110\6\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\5\20\1\111\2\20\5\0\1\106\10\20\1\112\2\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\3\20\1\113\4\20\1\114\2\20\1\0\4\20\1\0"+
    "\1\115\6\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\106\5\20\1\116"+
    "\5\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\106\3\20\1\117\7\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\10\20\5\0\1\106\3\20\1\120\7\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\106\13\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\1\20\1\121\11\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\106\5\20\1\122\5\20\1\0\4\20"+
    "\1\0\1\123\6\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\2\124\2\0\1\124"+
    "\1\125\13\124\1\125\4\124\1\125\7\124\2\0\3\124"+
    "\1\125\1\124\1\125\25\124\15\125\14\124\1\126\7\124"+
    "\5\0\1\127\13\24\1\0\4\24\1\0\7\24\2\0"+
    "\1\24\1\0\1\24\1\0\1\24\1\0\24\24\32\0"+
    "\10\24\11\0\1\130\7\0\1\131\2\0\1\25\1\26"+
    "\3\0\1\25\2\0\1\25\3\0\1\130\24\0\1\25"+
    "\72\0\2\26\3\0\1\26\2\0\1\26\30\0\1\26"+
    "\53\0\1\33\13\0\1\132\2\0\1\25\1\26\1\133"+
    "\2\0\1\25\2\0\1\25\6\0\1\33\1\0\1\33"+
    "\17\0\1\25\5\0\6\33\1\134\6\33\13\0\1\135"+
    "\21\0\1\130\4\0\1\136\2\0\1\131\2\0\1\25"+
    "\1\26\3\0\1\25\2\137\1\25\1\136\2\0\1\130"+
    "\24\0\1\25\53\0\1\33\13\0\1\33\4\0\1\33"+
    "\14\0\1\33\1\0\1\33\25\0\15\33\24\0\3\140"+
    "\1\0\15\140\1\141\47\140\1\0\15\140\1\142\24\140"+
    "\3\143\1\144\15\143\1\145\50\143\1\144\41\143\5\0"+
    "\1\33\13\0\1\132\2\0\1\25\1\26\1\33\2\0"+
    "\1\25\2\0\1\25\6\0\1\33\1\0\1\33\17\0"+
    "\1\25\5\0\15\33\122\0\1\146\42\0\1\33\13\0"+
    "\1\33\4\0\1\147\14\0\1\33\1\0\1\33\25\0"+
    "\15\33\31\0\1\33\13\20\1\33\1\20\3\0\1\33"+
    "\1\20\2\0\1\20\7\0\1\20\1\33\1\20\1\33"+
    "\25\0\15\33\14\0\10\20\5\0\1\33\13\0\1\33"+
    "\4\0\1\33\14\0\1\33\1\0\1\33\25\0\6\33"+
    "\1\150\6\33\31\0\1\151\13\0\1\151\4\0\1\151"+
    "\14\0\1\151\1\0\1\151\25\0\14\151\1\152\32\0"+
    "\13\153\1\0\2\153\3\0\2\153\1\0\2\153\1\0"+
    "\1\153\2\0\1\153\1\0\1\153\1\0\1\153\1\0"+
    "\17\153\1\0\3\153\5\0\2\154\2\0\1\155\2\0"+
    "\1\156\16\0\10\153\26\0\1\157\112\0\1\106\13\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\3\20\1\160\3\20"+
    "\1\161\5\0\1\106\10\20\1\162\2\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\106\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\7\20\1\163\3\0\1\67"+
    "\253\0\1\164\36\0\1\165\230\0\1\166\36\0\1\167"+
    "\146\0\1\170\100\0\13\171\1\0\2\171\3\0\2\171"+
    "\1\0\2\171\1\0\1\171\2\0\1\171\1\0\1\171"+
    "\1\0\1\171\1\0\17\171\1\0\3\171\5\0\2\172"+
    "\2\0\1\173\2\0\1\174\16\0\10\171\1\0\2\77"+
    "\1\0\1\77\1\0\1\100\1\0\1\101\1\102\6\0"+
    "\1\103\15\0\1\77\104\0\1\175\2\0\1\176\132\0"+
    "\1\177\134\0\1\200\1\201\1\0\1\202\130\0\1\203"+
    "\126\0\1\33\13\0\1\33\4\0\1\33\14\0\1\33"+
    "\1\0\1\33\25\0\15\33\13\0\1\204\10\0\2\205"+
    "\2\0\1\205\1\105\13\205\1\105\4\205\1\105\14\205"+
    "\1\105\1\205\1\105\25\205\15\105\24\205\5\0\1\106"+
    "\133\0\1\106\1\20\1\206\4\20\1\207\4\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\106\13\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\4\20\1\210\3\20"+
    "\5\0\1\106\7\20\1\211\3\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\106\1\20\1\212\5\20"+
    "\1\213\3\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\1\214\5\20\5\0\1\106\6\20\1\215\4\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\13\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\6\20\1\216"+
    "\1\20\5\0\1\106\13\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\1\217\5\20\5\0\1\106\13\20\1\0"+
    "\4\20\1\0\1\220\6\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\6\20\1\221\4\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\24\0\1\222\4\0\1\222\2\0\1\222\30\0"+
    "\1\222\53\0\1\33\13\0\1\33\2\0\1\222\1\0"+
    "\1\33\2\0\1\222\2\0\1\222\6\0\1\33\1\0"+
    "\1\33\17\0\1\222\5\0\15\33\35\0\1\223\12\0"+
    "\1\222\4\0\1\222\2\0\1\222\30\0\1\222\53\0"+
    "\1\127\152\0\1\224\1\0\1\225\2\0\1\224\2\0"+
    "\1\224\30\0\1\224\7\0\1\225\36\0\2\222\2\0"+
    "\32\222\2\0\74\222\2\124\2\0\1\124\1\125\13\124"+
    "\1\125\4\124\1\125\7\124\2\0\3\124\1\125\1\124"+
    "\1\125\25\124\15\125\24\124\2\226\2\0\1\227\127\226"+
    "\31\0\1\230\2\0\1\230\30\0\1\230\55\0\3\231"+
    "\5\0\1\231\4\0\1\231\2\0\3\231\2\0\1\231"+
    "\3\0\1\231\14\0\2\231\1\0\2\231\3\0\1\231"+
    "\36\0\1\231\100\0\1\232\51\0\1\140\2\0\1\140"+
    "\2\0\1\140\1\233\2\0\1\140\2\0\2\234\1\0"+
    "\1\140\1\235\1\234\1\236\1\0\1\234\3\0\1\237"+
    "\2\0\2\140\1\240\1\241\1\242\1\243\1\244\1\245"+
    "\2\0\1\246\1\247\1\0\1\250\1\251\1\245\1\242"+
    "\1\0\1\234\2\0\1\242\2\140\31\0\1\140\1\0"+
    "\1\140\12\0\1\151\13\0\1\151\4\0\1\151\14\0"+
    "\1\151\1\0\1\151\23\0\1\232\1\0\15\151\25\0"+
    "\4\252\2\0\1\143\2\0\1\143\2\0\1\143\1\253"+
    "\2\0\1\143\2\0\2\143\1\0\1\143\1\254\1\143"+
    "\1\255\1\0\1\143\1\0\1\252\1\0\1\256\2\0"+
    "\2\143\1\257\1\260\1\261\1\262\1\263\1\264\2\0"+
    "\1\265\1\266\1\0\1\267\1\270\1\264\1\261\1\0"+
    "\1\143\2\0\1\261\2\143\31\0\1\143\1\0\1\143"+
    "\12\0\1\151\13\0\1\151\4\0\1\151\14\0\1\151"+
    "\1\0\1\151\25\0\15\151\31\0\1\271\13\153\1\0"+
    "\4\153\1\0\7\153\2\0\1\153\1\0\1\153\1\0"+
    "\1\153\1\0\24\153\4\0\2\154\2\0\1\155\2\0"+
    "\1\156\16\0\10\153\6\0\13\153\1\0\1\153\4\0"+
    "\1\153\2\0\1\153\7\0\1\153\1\0\1\153\57\0"+
    "\10\153\2\272\1\273\2\272\1\274\77\272\1\275\15\272"+
    "\1\0\10\272\5\0\1\106\13\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\4\20\1\276\3\20\5\0\1\106\3\20"+
    "\1\277\7\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\2\20\1\300\10\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\106\3\20\1\301\7\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\105\0\1\302"+
    "\33\0\1\303\13\171\1\0\4\171\1\0\7\171\2\0"+
    "\1\171\1\0\1\171\1\0\1\171\1\0\24\171\4\0"+
    "\2\172\2\0\1\173\2\0\1\174\16\0\10\171\6\0"+
    "\13\171\1\0\1\171\4\0\1\171\2\0\1\171\7\0"+
    "\1\171\1\0\1\171\57\0\10\171\2\175\2\0\15\175"+
    "\1\304\112\175\17\0\1\305\123\0\1\306\134\0\1\307"+
    "\131\0\1\310\5\0\1\311\134\0\1\312\126\0\1\313"+
    "\123\0\2\205\2\0\130\205\5\0\1\106\1\314\12\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\13\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\1\315"+
    "\5\20\5\0\1\106\10\20\1\316\2\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\10\20\5\0\1\106\3\20\1\317"+
    "\7\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\106\13\20\1\0\4\20\1\0\1\320\6\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\106\1\321\12\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\106\13\20\1\0\4\20"+
    "\1\0\1\322\6\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\106\3\20"+
    "\1\323\7\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\1\324\5\20\5\0\1\106\6\20\1\325\4\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\3\20\1\326\7\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\11\0\1\130\12\0\1\222\4\0\1\222\2\0"+
    "\1\222\3\0\1\130\24\0\1\222\173\0\1\327\32\0"+
    "\1\224\4\0\1\224\2\0\1\224\30\0\1\224\46\0"+
    "\2\226\2\0\132\226\2\0\41\226\1\330\37\226\1\330"+
    "\26\226\31\0\1\331\2\0\1\331\30\0\1\331\72\0"+
    "\2\234\3\0\1\234\2\0\1\234\30\0\1\234\3\0"+
    "\1\232\102\0\1\332\7\0\1\333\5\0\1\334\64\0"+
    "\3\335\5\0\1\335\4\0\1\335\2\0\3\335\2\0"+
    "\1\335\3\0\1\335\14\0\2\335\1\0\2\335\3\0"+
    "\1\335\36\0\1\335\44\0\1\245\10\0\1\336\2\0"+
    "\1\337\1\0\1\340\13\0\1\140\65\0\1\140\1\0"+
    "\1\140\4\0\1\140\2\0\1\140\1\0\1\140\2\0"+
    "\3\140\2\0\20\140\1\0\3\140\13\0\1\140\13\0"+
    "\1\140\62\0\1\332\5\0\1\341\127\0\1\140\143\0"+
    "\1\140\107\0\1\342\11\0\1\343\3\0\1\344\10\0"+
    "\1\140\1\0\1\345\120\0\1\140\136\0\1\341\132\0"+
    "\1\345\5\0\1\140\110\0\1\332\10\0\1\140\133\0"+
    "\1\140\7\0\1\140\53\0\4\252\14\0\1\143\14\0"+
    "\1\252\126\0\1\143\2\0\1\143\30\0\1\143\106\0"+
    "\1\346\7\0\1\347\5\0\1\350\64\0\3\143\5\0"+
    "\1\143\4\0\1\143\2\0\3\143\2\0\1\143\3\0"+
    "\1\143\14\0\2\143\1\0\2\143\3\0\1\143\36\0"+
    "\1\143\44\0\1\264\10\0\1\351\2\0\1\352\1\0"+
    "\1\353\13\0\1\143\65\0\1\143\1\0\1\143\4\0"+
    "\1\143\2\0\1\143\1\0\1\143\2\0\3\143\2\0"+
    "\20\143\1\0\3\143\13\0\1\143\13\0\1\143\62\0"+
    "\1\346\5\0\1\354\127\0\1\143\143\0\1\143\107\0"+
    "\1\143\11\0\1\355\3\0\1\356\10\0\1\143\1\0"+
    "\1\357\120\0\1\143\136\0\1\354\132\0\1\357\5\0"+
    "\1\143\110\0\1\346\10\0\1\143\133\0\1\143\7\0"+
    "\1\143\57\0\1\271\13\153\1\0\2\153\3\0\2\153"+
    "\1\0\2\153\1\0\1\153\2\0\1\153\1\0\1\153"+
    "\1\0\1\153\1\0\17\153\1\0\3\153\5\0\2\154"+
    "\2\0\1\155\2\0\1\156\16\0\10\153\3\0\1\272"+
    "\130\0\2\360\1\361\2\360\1\0\115\360\1\0\10\360"+
    "\5\0\1\106\3\20\1\362\7\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\106\4\20\1\363\6\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\12\20\1\364\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\7\20\1\365\3\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\303\13\171\1\0\2\171"+
    "\3\0\2\171\1\0\2\171\1\0\1\171\2\0\1\171"+
    "\1\0\1\171\1\0\1\171\1\0\17\171\1\0\3\171"+
    "\5\0\2\172\2\0\1\173\2\0\1\174\16\0\10\171"+
    "\2\175\1\366\16\175\1\304\112\175\13\0\1\367\126\0"+
    "\1\370\133\0\1\310\134\0\1\175\135\0\1\175\140\0"+
    "\1\371\126\0\1\310\127\0\1\106\13\20\1\0\4\20"+
    "\1\0\3\20\1\372\3\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\13\20\1\0\4\20\1\0\1\373\6\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\7\20\1\374\3\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\106\1\375\12\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\106\12\20"+
    "\1\376\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\106\13\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\377\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\3\20\1\u0100\4\20\5\0\1\106\6\20\1\u0101\4\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\6\0\1\u0102"+
    "\125\0\2\330\1\u0103\1\u0104\130\330\31\0\1\331\2\0"+
    "\1\331\30\0\1\331\3\0\1\232\112\0\1\140\123\0"+
    "\1\140\160\0\1\140\55\0\3\335\5\0\1\335\4\0"+
    "\1\335\2\0\3\335\2\0\1\335\3\0\1\335\14\0"+
    "\2\335\1\0\2\335\3\0\1\335\3\0\1\232\32\0"+
    "\1\335\63\0\1\140\135\0\1\140\110\0\1\140\24\0"+
    "\1\140\132\0\1\140\126\0\1\140\16\0\1\232\122\0"+
    "\1\140\106\0\1\140\146\0\1\140\135\0\1\143\123\0"+
    "\1\143\160\0\1\143\122\0\1\143\135\0\1\143\110\0"+
    "\1\143\24\0\1\143\132\0\1\143\134\0\1\143\106\0"+
    "\1\143\146\0\1\143\70\0\1\360\134\0\1\u0105\1\106"+
    "\13\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\10\20\5\0"+
    "\1\106\5\20\1\u0106\5\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\10\20\5\0\1\106\3\20\1\u0107\7\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\2\175\1\0\16\175"+
    "\1\304\112\175\20\0\1\u0108\125\0\1\311\136\0\1\175"+
    "\123\0\1\106\5\20\1\u0109\1\20\1\u010a\3\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\106\4\20"+
    "\1\u010b\6\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\1\u010c\5\20\5\0\1\106\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\1\20\1\u010d\6\20\5\0\1\106"+
    "\5\20\1\u010e\5\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\5\0\1\106\1\u010f\12\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\10\20\5\0\1\106\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\4\20\1\u0110\3\20\12\0\1\u0111"+
    "\122\0\4\u0104\14\0\1\u0112\4\0\1\u0113\7\0\1\u0104"+
    "\76\0\2\u0104\1\0\1\u0104\14\0\1\u0112\4\0\1\u0113"+
    "\7\0\1\u0104\103\0\1\u0114\1\u0115\131\0\1\106\3\20"+
    "\1\u0116\7\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\10\0\1\311\130\0\1\106\11\20\1\u0117\1\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\10\20\5\0\1\106\4\20"+
    "\1\u0118\6\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\1\u0119\5\20\5\0\1\106\4\20\1\u011a\6\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\5\0\1\106"+
    "\3\20\1\u011b\7\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\10\20\122\0\1\u011c\135\0\1\u011d\35\0\1\330\117\0"+
    "\1\u011e\150\0\1\u011f\111\0\1\106\3\20\1\u0120\7\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\10\20\4\0\1\u0121"+
    "\1\106\13\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\10\20"+
    "\5\0\1\106\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\1\20\1\u0122\6\20\17\0\1\u0123\125\0\1\u0124\136\0"+
    "\1\u0125\250\0\1\u0126\10\0\1\u0127\2\0\1\u0128\140\0"+
    "\1\u0129\242\0\1\u012a\134\0\1\u012b\13\0\1\u012c\256\0"+
    "\1\u012d\34\0\1\u012e\111\0\1\u012f\131\0\1\u0130\154\0"+
    "\1\u0131\117\0\1\u0132\250\0\1\u0133\133\0\1\u0134\14\0"+
    "\1\u0135\134\0\1\u0136\133\0\1\u0137\250\0\1\u0138\22\0"+
    "\1\u0139\133\0\1\u013a\240\0\1\u013b\132\0\1\u013c\30\0"+
    "\1\u013d\131\0\1\u013e\133\0\1\u013f\135\0\1\u0140\125\0"+
    "\1\u0141\250\0\1\u0142\133\0\1\u0143\23\0\1\u0144\125\0"+
    "\1\u0145\134\0\1\u0146\245\0\1\u0147\12\0\1\u0103\1\u0104"+
    "\130\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24012];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\20\1\1\11\6\1\1\11"+
    "\7\1\10\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\7\1\5\0\20\1\1\0\1\1\1\0\1\1\2\0"+
    "\3\1\1\11\4\0\1\1\1\0\1\11\1\0\1\11"+
    "\4\1\3\0\1\11\5\1\3\11\1\0\1\11\3\0"+
    "\1\11\1\1\6\0\1\11\16\1\1\0\1\1\1\0"+
    "\4\1\1\11\37\0\1\11\1\1\1\11\5\1\1\11"+
    "\1\0\1\1\7\0\13\1\1\0\1\1\27\0\1\11"+
    "\6\1\3\0\10\1\4\0\2\1\1\0\10\1\5\0"+
    "\6\1\4\0\1\1\1\0\1\1\25\0\1\11\2\0"+
    "\1\11\5\0\3\11\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }
    private int commentStart;
    private int commentDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NCOMMENT;
            }
            case 328: break;
            case NHADDOCK: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NHADDOCK;
            }
            case 329: break;
            case QQ: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_QUASIQUOTE;
            }
            case 330: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 79: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 80: break;
          case 3: 
            { return HS_NEWLINE;
            }
          case 81: break;
          case 4: 
            { return HS_VARSYM_ID;
            }
          case 82: break;
          case 5: 
            { return HS_VAR_ID;
            }
          case 83: break;
          case 6: 
            { return HS_BACKSLASH;
            }
          case 84: break;
          case 7: 
            { return HS_CON_ID;
            }
          case 85: break;
          case 8: 
            { return HS_DECIMAL;
            }
          case 86: break;
          case 9: 
            { return HS_RIGHT_BRACKET;
            }
          case 87: break;
          case 10: 
            { return HS_UNDERSCORE;
            }
          case 88: break;
          case 11: 
            { return HS_QUOTE;
            }
          case 89: break;
          case 12: 
            { return HS_DOT;
            }
          case 90: break;
          case 13: 
            { return HS_EQUAL;
            }
          case 91: break;
          case 14: 
            { return HS_AT;
            }
          case 92: break;
          case 15: 
            { return HS_VERTICAL_BAR;
            }
          case 93: break;
          case 16: 
            { return HS_TILDE;
            }
          case 94: break;
          case 17: 
            { return HS_CONSYM_ID;
            }
          case 95: break;
          case 18: 
            { return HS_COLON_COLON;
            }
          case 96: break;
          case 19: 
            { return HS_LEFT_ARROW;
            }
          case 97: break;
          case 20: 
            { return HS_RIGHT_ARROW;
            }
          case 98: break;
          case 21: 
            { return HS_DOUBLE_RIGHT_ARROW;
            }
          case 99: break;
          case 22: 
            { return HS_LEFT_PAREN;
            }
          case 100: break;
          case 23: 
            { return HS_RIGHT_PAREN;
            }
          case 101: break;
          case 24: 
            { return HS_COMMA;
            }
          case 102: break;
          case 25: 
            { return HS_SEMICOLON;
            }
          case 103: break;
          case 26: 
            { return HS_LEFT_BRACKET;
            }
          case 104: break;
          case 27: 
            { return HS_BACKQUOTE;
            }
          case 105: break;
          case 28: 
            { return HS_LEFT_BRACE;
            }
          case 106: break;
          case 29: 
            { return HS_RIGHT_BRACE;
            }
          case 107: break;
          case 30: 
            { 
            }
          case 108: break;
          case 31: 
            { return HS_IF;
            }
          case 109: break;
          case 32: 
            { return HS_IN;
            }
          case 110: break;
          case 33: 
            { return HS_DO;
            }
          case 111: break;
          case 34: 
            { return HS_OF;
            }
          case 112: break;
          case 35: 
            { return HS_COMMENT;
            }
          case 113: break;
          case 36: 
            { return HS_NCOMMENT_END;
            }
          case 114: break;
          case 37: 
            { return HS_STRING_LITERAL;
            }
          case 115: break;
          case 38: 
            { return HS_DOT_DOT;
            }
          case 116: break;
          case 39: 
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            }
          case 117: break;
          case 40: 
            { return HS_NCOMMENT_START;
            }
          case 118: break;
          case 41: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            }
          case 119: break;
          case 42: 
            { commentDepth++;
            }
          case 120: break;
          case 43: 
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            }
          case 121: break;
          case 44: 
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            }
          case 122: break;
          case 45: 
            { qqDepth++;
            }
          case 123: break;
          case 46: 
            { return HS_DIRECTIVE;
            }
          case 124: break;
          case 47: 
            { return HS_PRAGMA_END;
            }
          case 125: break;
          case 48: 
            { return HS_SHEBANG_LINE;
            }
          case 126: break;
          case 49: 
            { return HS_LET;
            }
          case 127: break;
          case 50: 
            { return HS_FLOAT;
            }
          case 128: break;
          case 51: 
            { return HS_OCTAL;
            }
          case 129: break;
          case 52: 
            { return HS_HEXADECIMAL;
            }
          case 130: break;
          case 53: 
            { return HS_CHARACTER_LITERAL;
            }
          case 131: break;
          case 54: 
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          case 132: break;
          case 55: 
            { return HS_PRAGMA_START;
            }
          case 133: break;
          case 56: 
            { haddockDepth++;
            }
          case 134: break;
          case 57: 
            { return HS_DATA;
            }
          case 135: break;
          case 58: 
            { return HS_ELSE;
            }
          case 136: break;
          case 59: 
            { return HS_CASE;
            }
          case 137: break;
          case 60: 
            { return HS_HADDOCK;
            }
          case 138: break;
          case 61: 
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            }
          case 139: break;
          case 62: 
            { return HS_TYPE;
            }
          case 140: break;
          case 63: 
            { return HS_THEN;
            }
          case 141: break;
          case 64: 
            { return HS_INFIX;
            }
          case 142: break;
          case 65: 
            { return HS_CLASS;
            }
          case 143: break;
          case 66: 
            { return HS_WHERE;
            }
          case 144: break;
          case 67: 
            { return HS_INFIXL;
            }
          case 145: break;
          case 68: 
            { return HS_INFIXR;
            }
          case 146: break;
          case 69: 
            { return HS_IMPORT;
            }
          case 147: break;
          case 70: 
            { return HS_MODULE;
            }
          case 148: break;
          case 71: 
            { return HS_DEFAULT;
            }
          case 149: break;
          case 72: 
            { return HS_NEWTYPE;
            }
          case 150: break;
          case 73: 
            { return HS_INSTANCE;
            }
          case 151: break;
          case 74: 
            { return HS_DERIVING;
            }
          case 152: break;
          case 75: 
            { return HS_TYPE_FAMILY;
            }
          case 153: break;
          case 76: 
            { return HS_TYPE_INSTANCE;
            }
          case 154: break;
          case 77: 
            { return HS_FOREIGN_IMPORT;
            }
          case 155: break;
          case 78: 
            { return HS_FOREIGN_EXPORT;
            }
          case 156: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
