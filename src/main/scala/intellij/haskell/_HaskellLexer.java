/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 7, 5]
   * Total runtime size is 2592 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<7)|((ch>>5)&0x7f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\u010d\1");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\26\6\1\7\1\10\1\11\342\6\1\12\1\6\1\13\1\14\7\6\1"+
    "\15\1\6\1\16\1\6\1\17\1\20\1\6\1\21\1\22\33\6\1\23\117\6");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\3\3\0\1\3\1\2\2\3\1\1\22\0\1\124\1\71\1\70\1\4\2\72\1\41\1\67\1\111"+
    "\1\112\1\72\1\73\1\113\1\25\1\35\1\72\1\30\4\63\3\33\2\23\1\104\1\114\1\75"+
    "\1\100\1\76\1\77\1\101\1\53\1\56\1\54\1\27\1\36\1\57\1\66\1\50\1\62\1\22\1"+
    "\55\1\46\1\65\1\44\1\34\1\62\1\52\1\61\1\47\1\51\1\45\1\60\1\22\1\32\1\64"+
    "\1\22\1\115\1\20\1\37\1\43\1\40\1\116\1\26\1\122\1\16\1\7\1\10\1\6\1\123\1"+
    "\133\1\5\2\21\1\12\1\131\1\11\1\15\1\130\1\21\1\14\1\13\1\126\1\17\1\42\1"+
    "\132\1\31\1\127\1\21\1\117\1\102\1\120\1\103\6\0\1\125\32\0\1\3\120\0\31\22"+
    "\7\0\31\21\36\0\2\125\46\0\12\24\6\0\12\24\46\0\1\106\1\0\1\107\37\0\1\110"+
    "\15\0\1\121\27\0\1\74\36\0\1\105\13\0\3\72\66\0\1\72\10\0\1\72\32\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7"+
    "\2\10\1\4\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\4\1\11\2\4\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\3\5\10\40"+
    "\5\0\2\4\1\5\1\41\1\42\3\5\1\43\4\5"+
    "\1\44\2\5\1\0\1\7\1\0\1\45\1\46\1\4"+
    "\1\25\1\47\2\0\1\50\2\0\1\22\1\0\1\51"+
    "\1\0\1\24\1\26\1\22\1\23\3\0\1\52\1\53"+
    "\4\5\1\54\1\55\1\56\1\0\1\57\3\0\1\60"+
    "\1\61\6\0\1\62\1\63\11\5\1\64\2\5\1\0"+
    "\1\45\1\0\2\46\1\65\1\66\1\67\37\0\2\70"+
    "\1\71\1\70\4\5\1\72\1\0\1\61\7\0\6\5"+
    "\1\73\1\74\2\5\1\75\1\0\1\76\27\0\2\77"+
    "\1\100\1\101\2\5\1\61\3\0\1\102\6\5\1\103"+
    "\4\0\1\5\1\104\1\0\1\105\1\106\1\5\1\107"+
    "\4\5\5\0\1\110\2\5\1\111\1\5\1\112\4\0"+
    "\1\113\1\0\1\114\25\0\1\115\2\0\1\46\5\0"+
    "\1\116\1\117\1\120\3\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\134\0\270\0\u0114\0\u0170\0\u01cc\0\u0170\0\u0228"+
    "\0\u0284\0\u02e0\0\u033c\0\u0398\0\u03f4\0\u0450\0\u04ac\0\u0508"+
    "\0\u0564\0\u05c0\0\u061c\0\u0678\0\u06d4\0\u0730\0\u078c\0\u07e8"+
    "\0\u0844\0\u0170\0\u0508\0\u08a0\0\u08fc\0\u0958\0\u09b4\0\u0170"+
    "\0\u0a10\0\u0a6c\0\u0ac8\0\u08a0\0\u08a0\0\u08a0\0\u0b24\0\u0170"+
    "\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0170\0\u0b80"+
    "\0\u0170\0\u0bdc\0\u0170\0\u0170\0\u0c38\0\u0c94\0\u0cf0\0\u0170"+
    "\0\u0d4c\0\u0da8\0\u0e04\0\u0e60\0\u0ebc\0\u0f18\0\u0f74\0\u0fd0"+
    "\0\u102c\0\u1088\0\u10e4\0\u1140\0\u119c\0\u11f8\0\u1254\0\u0508"+
    "\0\u12b0\0\u130c\0\u1368\0\u13c4\0\u0508\0\u1420\0\u147c\0\u14d8"+
    "\0\u1534\0\u0508\0\u1590\0\u15ec\0\u1648\0\u16a4\0\u1700\0\u175c"+
    "\0\u17b8\0\u1814\0\u08a0\0\u0170\0\u1870\0\u18cc\0\u0170\0\u1928"+
    "\0\u1984\0\u19e0\0\u0958\0\u0170\0\u1a3c\0\u08a0\0\u08a0\0\u1a98"+
    "\0\u1a98\0\u1af4\0\u0b80\0\u1b50\0\u0170\0\u1bac\0\u1c08\0\u1c64"+
    "\0\u1cc0\0\u1d1c\0\u0170\0\u0170\0\u0170\0\u1d78\0\u0170\0\u1dd4"+
    "\0\u0f74\0\u1e30\0\u0170\0\u1e8c\0\u1ee8\0\u1f44\0\u1fa0\0\u1ffc"+
    "\0\u2058\0\u20b4\0\u0170\0\u2110\0\u216c\0\u21c8\0\u2224\0\u2280"+
    "\0\u22dc\0\u2338\0\u2394\0\u23f0\0\u244c\0\u0508\0\u24a8\0\u2504"+
    "\0\u2560\0\u25bc\0\u25bc\0\u2618\0\u2674\0\u1870\0\u18cc\0\u0170"+
    "\0\u26d0\0\u272c\0\u2788\0\u27e4\0\u2840\0\u289c\0\u28f8\0\u2954"+
    "\0\u29b0\0\u2a0c\0\u2a68\0\u2ac4\0\u2b20\0\u2b7c\0\u2bd8\0\u2c34"+
    "\0\u2c90\0\u2cec\0\u2d48\0\u2da4\0\u2e00\0\u2e5c\0\u2eb8\0\u2f14"+
    "\0\u2f70\0\u2fcc\0\u3028\0\u3084\0\u30e0\0\u313c\0\u3198\0\u0170"+
    "\0\u31f4\0\u0170\0\u3250\0\u32ac\0\u3308\0\u3364\0\u33c0\0\u0170"+
    "\0\u341c\0\u3478\0\u34d4\0\u3530\0\u358c\0\u35e8\0\u3644\0\u36a0"+
    "\0\u36fc\0\u3758\0\u37b4\0\u3810\0\u386c\0\u38c8\0\u3924\0\u0508"+
    "\0\u0508\0\u3980\0\u39dc\0\u0508\0\u3a38\0\u3a94\0\u3af0\0\u3b4c"+
    "\0\u3ba8\0\u3c04\0\u3c60\0\u3cbc\0\u3d18\0\u3d74\0\u3dd0\0\u3e2c"+
    "\0\u3e88\0\u3ee4\0\u3f40\0\u3f9c\0\u3ff8\0\u4054\0\u40b0\0\u410c"+
    "\0\u4168\0\u41c4\0\u4220\0\u427c\0\u42d8\0\u0170\0\u4334\0\u4390"+
    "\0\u0508\0\u43ec\0\u4448\0\u44a4\0\u4500\0\u455c\0\u45b8\0\u4614"+
    "\0\u4670\0\u46cc\0\u4728\0\u4784\0\u47e0\0\u483c\0\u0508\0\u4898"+
    "\0\u48f4\0\u4950\0\u49ac\0\u4a08\0\u0508\0\u4a64\0\u0508\0\u0508"+
    "\0\u4ac0\0\u0508\0\u4b1c\0\u4b78\0\u4bd4\0\u4c30\0\u4c8c\0\u4ce8"+
    "\0\u4d44\0\u4da0\0\u4dfc\0\u0508\0\u4e58\0\u4eb4\0\u0508\0\u4f10"+
    "\0\u0508\0\u4f6c\0\u4fc8\0\u5024\0\u5080\0\u0508\0\u50dc\0\u0508"+
    "\0\u5138\0\u5194\0\u51f0\0\u524c\0\u52a8\0\u5304\0\u5360\0\u53bc"+
    "\0\u5418\0\u5474\0\u54d0\0\u552c\0\u5588\0\u55e4\0\u5640\0\u569c"+
    "\0\u56f8\0\u5754\0\u57b0\0\u580c\0\u5868\0\u0170\0\u58c4\0\u5920"+
    "\0\u0170\0\u597c\0\u59d8\0\u5a34\0\u5a90\0\u5aec\0\u0170\0\u0170"+
    "\0\u0170\0\u5b48\0\u5ba4\0\u5c00\0\u5c5c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\20\1\21\1\22\1\20\1\23"+
    "\1\20\1\24\1\25\1\26\1\27\1\20\1\24\1\30"+
    "\1\20\1\24\1\25\1\24\1\31\1\24\1\32\1\33"+
    "\1\34\1\20\1\34\17\24\1\25\3\24\1\35\1\36"+
    "\2\34\1\37\1\40\1\41\1\34\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\2\20\1\10\1\5\1\65\2\20\1\66\1\67\1\20"+
    "\1\70\1\71\23\70\1\72\71\70\1\73\5\70\1\0"+
    "\7\70\1\71\23\70\1\74\71\70\1\75\5\70\1\0"+
    "\7\70\1\71\100\70\1\76\12\70\1\77\7\70\1\0"+
    "\6\70\135\0\1\10\1\7\1\10\120\0\1\10\10\0"+
    "\1\10\1\0\1\10\120\0\1\10\10\0\1\100\1\0"+
    "\1\100\1\34\1\101\1\0\1\102\1\103\6\0\1\104"+
    "\1\34\4\0\1\105\7\0\1\34\3\0\1\34\1\0"+
    "\1\34\25\0\1\106\13\34\17\0\1\100\13\0\1\107"+
    "\1\20\1\110\2\20\1\111\6\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\3\20\1\112\2\20\4\0"+
    "\1\107\10\20\1\113\2\20\1\0\4\20\1\0\7\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\4\0\1\107\3\20\1\114"+
    "\4\20\1\115\2\20\1\0\4\20\1\0\1\116\6\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\4\0\1\107\5\20\1\117"+
    "\5\20\1\0\4\20\1\0\7\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\2\0"+
    "\6\20\4\0\1\107\3\20\1\120\7\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\6\20\4\0\1\107"+
    "\3\20\1\121\7\20\1\0\4\20\1\0\7\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\2\0\6\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\6\20\4\0\1\107"+
    "\1\20\1\122\11\20\1\0\4\20\1\0\7\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\2\0\6\20\4\0\1\107\5\20\1\123\5\20"+
    "\1\0\4\20\1\0\1\124\6\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\2\0"+
    "\6\20\4\0\1\34\13\0\1\34\4\0\1\34\7\0"+
    "\1\34\3\0\1\34\1\0\1\34\25\0\14\34\15\0"+
    "\1\125\15\0\1\126\13\24\1\0\4\24\1\0\7\24"+
    "\1\0\1\24\1\0\1\24\1\0\1\24\1\0\24\24"+
    "\32\0\2\24\2\0\6\24\10\0\1\127\12\0\1\25"+
    "\1\26\3\0\1\25\2\0\1\25\1\0\1\130\1\127"+
    "\24\0\1\25\73\0\2\26\3\0\1\26\2\0\1\26"+
    "\27\0\1\26\54\0\1\34\13\0\1\34\2\0\1\25"+
    "\1\26\1\131\2\0\1\25\2\0\1\25\1\0\1\132"+
    "\3\0\1\34\1\0\1\34\17\0\1\25\5\0\5\34"+
    "\1\133\6\34\13\0\1\134\23\0\1\127\4\0\1\135"+
    "\5\0\1\25\1\26\3\0\1\25\2\136\1\25\1\135"+
    "\1\130\1\127\24\0\1\25\73\0\1\130\4\0\1\130"+
    "\2\0\1\130\1\0\1\137\25\0\1\130\54\0\1\34"+
    "\13\0\1\34\4\0\1\34\7\0\1\34\3\0\1\34"+
    "\1\0\1\34\25\0\14\34\27\0\2\140\1\0\15\140"+
    "\1\141\46\140\1\0\14\140\1\142\27\140\2\143\1\144"+
    "\15\143\1\145\47\143\1\144\43\143\4\0\1\34\13\0"+
    "\1\34\2\0\1\25\1\26\1\34\2\0\1\25\2\0"+
    "\1\25\1\0\1\132\3\0\1\34\1\0\1\34\17\0"+
    "\1\25\5\0\14\34\33\0\1\34\13\0\1\34\4\0"+
    "\1\146\7\0\1\34\3\0\1\34\1\0\1\34\25\0"+
    "\14\34\33\0\1\34\13\20\1\34\1\20\3\0\1\34"+
    "\1\20\2\0\1\20\3\0\1\34\2\0\1\20\1\34"+
    "\1\20\1\34\25\0\14\34\15\0\2\20\2\0\6\20"+
    "\4\0\1\34\13\0\1\34\4\0\1\34\7\0\1\34"+
    "\3\0\1\34\1\0\1\34\25\0\5\34\1\147\6\34"+
    "\33\0\1\150\13\0\1\150\4\0\1\150\7\0\1\150"+
    "\3\0\1\150\1\0\1\150\25\0\13\150\1\151\34\0"+
    "\13\152\1\0\2\152\3\0\2\152\1\0\2\152\1\0"+
    "\1\152\1\153\1\152\1\0\1\152\1\0\1\152\1\0"+
    "\17\152\1\0\3\152\5\0\1\153\2\0\1\154\2\0"+
    "\1\155\17\0\2\152\2\0\6\152\25\0\1\156\112\0"+
    "\1\107\13\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\1\20\1\157\3\20\1\160\4\0\1\107\10\20"+
    "\1\161\2\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\6\20\4\0\1\107\13\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\5\20\1\162\2\0\1\70"+
    "\251\0\1\163\40\0\1\164\226\0\1\165\40\0\1\166"+
    "\145\0\1\167\101\0\13\170\1\0\2\170\3\0\2\170"+
    "\1\0\2\170\1\0\1\170\1\171\1\170\1\0\1\170"+
    "\1\0\1\170\1\0\17\170\1\0\3\170\5\0\1\171"+
    "\2\0\1\172\2\0\1\173\17\0\2\170\2\0\6\170"+
    "\1\0\1\100\1\0\1\100\1\0\1\101\1\0\1\102"+
    "\1\103\6\0\1\104\104\0\1\100\15\0\1\174\2\0"+
    "\1\175\132\0\1\176\134\0\1\177\1\200\1\0\1\201"+
    "\130\0\1\202\126\0\1\34\13\0\1\34\4\0\1\34"+
    "\7\0\1\34\3\0\1\34\1\0\1\34\25\0\14\34"+
    "\13\0\1\203\13\0\1\204\2\0\1\204\1\106\13\204"+
    "\1\106\4\204\1\106\7\204\1\106\3\204\1\106\1\204"+
    "\1\106\25\204\14\106\27\204\4\0\1\107\133\0\1\107"+
    "\1\20\1\205\4\20\1\206\4\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\4\0\1\107\13\20"+
    "\1\0\4\20\1\0\7\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\2\20\2\0\2\20"+
    "\1\207\3\20\4\0\1\107\7\20\1\210\3\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\4\0"+
    "\1\107\1\20\1\211\5\20\1\212\3\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\6\20\4\0\1\107"+
    "\13\20\1\0\4\20\1\0\7\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\2\0"+
    "\1\213\5\20\4\0\1\107\6\20\1\214\4\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\4\0"+
    "\1\107\13\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\4\20\1\215\1\20\4\0\1\107\13\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\1\216\5\20"+
    "\4\0\1\107\13\20\1\0\4\20\1\0\1\217\6\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\4\0\1\107\6\20\1\220"+
    "\4\20\1\0\4\20\1\0\7\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\2\0"+
    "\6\20\10\0\1\221\127\0\1\126\152\0\1\222\1\0"+
    "\1\223\2\0\1\222\2\0\1\222\27\0\1\222\7\0"+
    "\1\223\50\0\1\127\12\0\1\130\4\0\1\130\2\0"+
    "\1\130\2\0\1\127\24\0\1\130\50\0\1\224\2\0"+
    "\121\224\1\225\7\224\4\0\1\34\13\0\1\34\2\0"+
    "\1\130\1\0\1\34\2\0\1\130\2\0\1\130\1\0"+
    "\1\34\3\0\1\34\1\0\1\34\17\0\1\130\5\0"+
    "\14\34\57\0\1\226\2\0\1\226\27\0\1\226\56\0"+
    "\3\227\5\0\1\227\4\0\1\227\2\0\3\227\2\0"+
    "\1\227\2\0\1\227\14\0\2\227\1\0\2\227\3\0"+
    "\1\227\36\0\1\227\100\0\1\230\52\0\1\140\2\0"+
    "\1\140\2\0\1\140\1\231\2\0\1\140\2\0\2\232"+
    "\1\0\1\140\1\233\1\232\1\234\1\0\1\232\2\0"+
    "\1\235\2\0\2\140\1\236\1\237\1\240\1\241\1\242"+
    "\1\243\2\0\1\244\1\245\1\0\1\246\1\247\1\243"+
    "\1\240\1\0\1\232\2\0\1\240\2\140\31\0\1\140"+
    "\3\0\1\140\11\0\1\150\13\0\1\150\4\0\1\150"+
    "\7\0\1\150\3\0\1\150\1\0\1\150\23\0\1\230"+
    "\1\0\14\150\30\0\3\250\2\0\1\143\2\0\1\143"+
    "\2\0\1\143\1\251\2\0\1\143\2\0\2\143\1\0"+
    "\1\143\1\252\1\143\1\253\1\0\1\143\2\0\1\254"+
    "\2\0\2\143\1\255\1\256\1\257\1\260\1\261\1\262"+
    "\2\0\1\263\1\264\1\0\1\265\1\266\1\262\1\257"+
    "\1\0\1\143\2\0\1\257\2\143\31\0\1\143\1\0"+
    "\1\250\1\0\1\143\11\0\1\150\13\0\1\150\4\0"+
    "\1\150\7\0\1\150\3\0\1\150\1\0\1\150\25\0"+
    "\14\150\33\0\1\267\13\152\1\0\4\152\1\0\7\152"+
    "\1\153\1\152\1\0\1\152\1\0\1\152\1\0\24\152"+
    "\4\0\1\153\2\0\1\154\2\0\1\155\17\0\2\152"+
    "\2\0\6\152\5\0\13\152\1\0\1\152\4\0\1\152"+
    "\2\0\1\152\6\0\1\152\1\0\1\152\57\0\2\152"+
    "\2\0\6\152\1\270\1\271\2\270\1\272\75\270\1\273"+
    "\15\270\1\0\13\270\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\2\20\1\274\3\20"+
    "\4\0\1\107\3\20\1\275\7\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\4\0\1\107\2\20"+
    "\1\276\10\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\6\20\4\0\1\107\3\20\1\277\7\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\102\0"+
    "\1\300\35\0\1\301\13\170\1\0\4\170\1\0\7\170"+
    "\1\171\1\170\1\0\1\170\1\0\1\170\1\0\24\170"+
    "\4\0\1\171\2\0\1\172\2\0\1\173\17\0\2\170"+
    "\2\0\6\170\5\0\13\170\1\0\1\170\4\0\1\170"+
    "\2\0\1\170\6\0\1\170\1\0\1\170\57\0\2\170"+
    "\2\0\6\170\1\174\2\0\15\174\1\302\113\174\16\0"+
    "\1\303\123\0\1\304\134\0\1\305\131\0\1\306\5\0"+
    "\1\307\134\0\1\310\126\0\1\311\124\0\1\204\2\0"+
    "\131\204\4\0\1\107\1\312\12\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\4\0\1\107\13\20"+
    "\1\0\4\20\1\0\7\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\2\20\2\0\1\313"+
    "\5\20\4\0\1\107\10\20\1\314\2\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\6\20\4\0\1\107"+
    "\3\20\1\315\7\20\1\0\4\20\1\0\7\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\2\0\6\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\1\316\6\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\4\0"+
    "\1\107\1\317\12\20\1\0\4\20\1\0\7\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\2\0\6\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\1\320\6\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\4\0"+
    "\1\107\3\20\1\321\7\20\1\0\4\20\1\0\7\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\4\0\1\107\13\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\1\322\5\20"+
    "\4\0\1\107\6\20\1\323\4\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\4\0\1\107\3\20"+
    "\1\324\7\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\6\20\123\0\1\325\33\0\1\222\4\0\1\222"+
    "\2\0\1\222\27\0\1\222\50\0\1\224\2\0\132\224"+
    "\2\0\40\224\1\326\36\224\1\326\31\224\30\0\1\327"+
    "\2\0\1\327\27\0\1\327\73\0\2\232\3\0\1\232"+
    "\2\0\1\232\27\0\1\232\3\0\1\230\102\0\1\330"+
    "\7\0\1\331\5\0\1\332\65\0\3\333\5\0\1\333"+
    "\4\0\1\333\2\0\3\333\2\0\1\333\2\0\1\333"+
    "\14\0\2\333\1\0\2\333\3\0\1\333\36\0\1\333"+
    "\45\0\1\243\7\0\1\334\2\0\1\335\1\0\1\336"+
    "\13\0\1\140\66\0\1\140\1\0\1\140\4\0\1\140"+
    "\2\0\1\140\1\0\1\140\1\0\3\140\2\0\20\140"+
    "\1\0\3\140\12\0\1\140\13\0\1\140\63\0\1\330"+
    "\5\0\1\337\127\0\1\140\143\0\1\140\110\0\1\340"+
    "\10\0\1\341\3\0\1\342\10\0\1\140\1\0\1\343"+
    "\120\0\1\140\136\0\1\337\132\0\1\343\5\0\1\140"+
    "\110\0\1\330\10\0\1\140\133\0\1\140\7\0\1\140"+
    "\55\0\3\250\14\0\1\143\103\0\1\250\37\0\1\143"+
    "\2\0\1\143\27\0\1\143\106\0\1\344\7\0\1\345"+
    "\5\0\1\346\65\0\3\143\5\0\1\143\4\0\1\143"+
    "\2\0\3\143\2\0\1\143\2\0\1\143\14\0\2\143"+
    "\1\0\2\143\3\0\1\143\36\0\1\143\45\0\1\262"+
    "\7\0\1\347\2\0\1\350\1\0\1\351\13\0\1\143"+
    "\66\0\1\143\1\0\1\143\4\0\1\143\2\0\1\143"+
    "\1\0\1\143\1\0\3\143\2\0\20\143\1\0\3\143"+
    "\12\0\1\143\13\0\1\143\63\0\1\344\5\0\1\352"+
    "\127\0\1\143\143\0\1\143\110\0\1\143\10\0\1\353"+
    "\3\0\1\354\10\0\1\143\1\0\1\355\120\0\1\143"+
    "\136\0\1\352\132\0\1\355\5\0\1\143\110\0\1\344"+
    "\10\0\1\143\133\0\1\143\7\0\1\143\60\0\1\267"+
    "\13\152\1\0\2\152\3\0\2\152\1\0\2\152\1\0"+
    "\1\152\1\153\1\152\1\0\1\152\1\0\1\152\1\0"+
    "\17\152\1\0\3\152\5\0\1\153\2\0\1\154\2\0"+
    "\1\155\17\0\2\152\2\0\6\152\2\0\1\270\131\0"+
    "\1\356\1\357\2\356\1\0\113\356\1\0\13\356\4\0"+
    "\1\107\3\20\1\360\7\20\1\0\4\20\1\0\7\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\4\0\1\107\4\20\1\361"+
    "\6\20\1\0\4\20\1\0\7\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\2\0"+
    "\6\20\4\0\1\107\12\20\1\362\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\4\0\1\107\7\20"+
    "\1\363\3\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\6\20\4\0\1\301\13\170\1\0\2\170\3\0"+
    "\2\170\1\0\2\170\1\0\1\170\1\171\1\170\1\0"+
    "\1\170\1\0\1\170\1\0\17\170\1\0\3\170\5\0"+
    "\1\171\2\0\1\172\2\0\1\173\17\0\2\170\2\0"+
    "\6\170\1\174\1\364\16\174\1\302\113\174\12\0\1\365"+
    "\126\0\1\366\133\0\1\306\134\0\1\174\135\0\1\174"+
    "\140\0\1\367\126\0\1\306\127\0\1\107\13\20\1\0"+
    "\4\20\1\0\3\20\1\370\3\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\2\0"+
    "\6\20\4\0\1\107\13\20\1\0\4\20\1\0\1\371"+
    "\6\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\4\0\1\107\7\20"+
    "\1\372\3\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\6\20\4\0\1\107\1\373\12\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\6\20\4\0\1\107"+
    "\12\20\1\374\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\6\20\4\0\1\107\13\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\375\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\4\0\1\107\13\20"+
    "\1\0\4\20\1\0\7\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\2\20\2\0\1\20"+
    "\1\376\4\20\4\0\1\107\6\20\1\377\4\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\5\0"+
    "\1\u0100\126\0\1\326\1\u0101\1\u0102\131\326\30\0\1\327"+
    "\2\0\1\327\27\0\1\327\3\0\1\230\112\0\1\140"+
    "\123\0\1\140\160\0\1\140\56\0\3\333\5\0\1\333"+
    "\4\0\1\333\2\0\3\333\2\0\1\333\2\0\1\333"+
    "\14\0\2\333\1\0\2\333\3\0\1\333\3\0\1\230"+
    "\32\0\1\333\63\0\1\140\135\0\1\140\111\0\1\140"+
    "\23\0\1\140\132\0\1\140\126\0\1\140\16\0\1\230"+
    "\122\0\1\140\107\0\1\140\145\0\1\140\135\0\1\143"+
    "\123\0\1\143\160\0\1\143\122\0\1\143\135\0\1\143"+
    "\111\0\1\143\23\0\1\143\132\0\1\143\134\0\1\143"+
    "\107\0\1\143\145\0\1\143\71\0\1\356\135\0\1\107"+
    "\13\20\1\0\4\20\1\0\7\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\1\u0103"+
    "\1\0\6\20\4\0\1\107\5\20\1\u0104\5\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\4\0"+
    "\1\107\3\20\1\u0105\7\20\1\0\4\20\1\0\7\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\1\174\1\0\16\174\1\302"+
    "\113\174\17\0\1\u0106\125\0\1\307\136\0\1\174\123\0"+
    "\1\107\5\20\1\u0107\1\20\1\u0108\3\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\6\20\4\0\1\107"+
    "\4\20\1\u0109\6\20\1\0\4\20\1\0\7\20\1\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\32\0"+
    "\2\20\2\0\6\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\1\u010a\5\20\4\0"+
    "\1\107\13\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\1\20"+
    "\1\u010b\2\0\6\20\4\0\1\107\5\20\1\u010c\5\20"+
    "\1\0\4\20\1\0\7\20\1\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\32\0\2\20\2\0\6\20"+
    "\4\0\1\107\1\u010d\12\20\1\0\4\20\1\0\7\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\4\0\1\107\13\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\2\20\1\u010e"+
    "\3\20\11\0\1\u010f\123\0\3\u0102\14\0\1\u0110\4\0"+
    "\1\u0111\76\0\1\u0102\10\0\1\u0102\1\0\1\u0102\14\0"+
    "\1\u0110\4\0\1\u0111\76\0\1\u0102\14\0\1\u0112\1\u0113"+
    "\131\0\1\107\3\20\1\u0114\7\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\2\20\2\0\6\20\7\0\1\307\130\0"+
    "\1\107\11\20\1\u0115\1\20\1\0\4\20\1\0\7\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\6\20\4\0\1\107\4\20\1\u0116"+
    "\6\20\1\0\4\20\1\0\7\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\2\0"+
    "\6\20\4\0\1\107\13\20\1\0\4\20\1\0\7\20"+
    "\1\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\32\0\2\20\2\0\1\u0117\5\20\4\0\1\107\4\20"+
    "\1\u0118\6\20\1\0\4\20\1\0\7\20\1\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\32\0\2\20"+
    "\2\0\6\20\4\0\1\107\3\20\1\u0119\7\20\1\0"+
    "\4\20\1\0\7\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\32\0\2\20\2\0\6\20\117\0"+
    "\1\u011a\136\0\1\u011b\36\0\1\326\117\0\1\u011c\150\0"+
    "\1\u011d\111\0\1\107\3\20\1\u011e\7\20\1\0\4\20"+
    "\1\0\7\20\1\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\32\0\2\20\2\0\6\20\4\0\1\107"+
    "\13\20\1\0\4\20\1\0\7\20\1\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\32\0\2\20\1\u011f"+
    "\1\0\6\20\4\0\1\107\13\20\1\0\4\20\1\0"+
    "\7\20\1\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\32\0\1\20\1\u0120\2\0\6\20\16\0\1\u0121"+
    "\125\0\1\u0122\136\0\1\u0123\251\0\1\u0124\7\0\1\u0125"+
    "\2\0\1\u0126\140\0\1\u0127\241\0\1\u0128\136\0\1\u0129"+
    "\12\0\1\u012a\257\0\1\u012b\33\0\1\u012c\111\0\1\u012d"+
    "\131\0\1\u012e\154\0\1\u012f\117\0\1\u0130\251\0\1\u0131"+
    "\133\0\1\u0132\13\0\1\u0133\134\0\1\u0134\133\0\1\u0135"+
    "\251\0\1\u0136\21\0\1\u0137\133\0\1\u0138\236\0\1\u0139"+
    "\132\0\1\u013a\32\0\1\u013b\131\0\1\u013c\133\0\1\u013d"+
    "\135\0\1\u013e\125\0\1\u013f\251\0\1\u0140\133\0\1\u0141"+
    "\22\0\1\u0142\125\0\1\u0143\134\0\1\u0144\243\0\1\u0145"+
    "\14\0\1\u0101\1\u0102\131\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23736];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\22\1\1\11\5\1\1\11"+
    "\7\1\10\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\7\1\5\0\20\1\1\0\1\1\1\0\4\1\1\11"+
    "\2\0\1\11\2\0\1\1\1\0\1\11\1\0\4\1"+
    "\3\0\1\11\5\1\3\11\1\0\1\11\3\0\1\11"+
    "\1\1\6\0\1\11\15\1\1\0\1\1\1\0\4\1"+
    "\1\11\37\0\1\11\1\1\1\11\5\1\1\11\1\0"+
    "\1\1\7\0\13\1\1\0\1\1\27\0\1\11\6\1"+
    "\3\0\10\1\4\0\2\1\1\0\10\1\5\0\6\1"+
    "\4\0\1\1\1\0\1\1\25\0\1\11\2\0\1\11"+
    "\5\0\3\11\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }
    private int commentStart;
    private int commentDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NCOMMENT;
            }
            case 326: break;
            case NHADDOCK: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NHADDOCK;
            }
            case 327: break;
            case QQ: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_QUASIQUOTE;
            }
            case 328: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 81: break;
          case 2: 
            { return HS_NEWLINE;
            }
          case 82: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 83: break;
          case 4: 
            { return HS_VARSYM_ID;
            }
          case 84: break;
          case 5: 
            { return HS_VAR_ID;
            }
          case 85: break;
          case 6: 
            { return HS_BACKSLASH;
            }
          case 86: break;
          case 7: 
            { return HS_CON_ID;
            }
          case 87: break;
          case 8: 
            { return HS_DECIMAL;
            }
          case 88: break;
          case 9: 
            { return HS_DOT;
            }
          case 89: break;
          case 10: 
            { return HS_RIGHT_BRACKET;
            }
          case 90: break;
          case 11: 
            { return HS_UNDERSCORE;
            }
          case 91: break;
          case 12: 
            { return HS_QUOTE;
            }
          case 92: break;
          case 13: 
            { return HS_DOUBLE_QUOTE;
            }
          case 93: break;
          case 14: 
            { return HS_EQUAL;
            }
          case 94: break;
          case 15: 
            { return HS_AT;
            }
          case 95: break;
          case 16: 
            { return HS_VERTICAL_BAR;
            }
          case 96: break;
          case 17: 
            { return HS_TILDE;
            }
          case 97: break;
          case 18: 
            { return HS_CONSYM_ID;
            }
          case 98: break;
          case 19: 
            { return HS_COLON_COLON;
            }
          case 99: break;
          case 20: 
            { return HS_LEFT_ARROW;
            }
          case 100: break;
          case 21: 
            { return HS_RIGHT_ARROW;
            }
          case 101: break;
          case 22: 
            { return HS_DOUBLE_RIGHT_ARROW;
            }
          case 102: break;
          case 23: 
            { return HS_LEFT_PAREN;
            }
          case 103: break;
          case 24: 
            { return HS_RIGHT_PAREN;
            }
          case 104: break;
          case 25: 
            { return HS_COMMA;
            }
          case 105: break;
          case 26: 
            { return HS_SEMICOLON;
            }
          case 106: break;
          case 27: 
            { return HS_LEFT_BRACKET;
            }
          case 107: break;
          case 28: 
            { return HS_BACKQUOTE;
            }
          case 108: break;
          case 29: 
            { return HS_LEFT_BRACE;
            }
          case 109: break;
          case 30: 
            { return HS_RIGHT_BRACE;
            }
          case 110: break;
          case 31: 
            { return HS_FORALL;
            }
          case 111: break;
          case 32: 
            { 
            }
          case 112: break;
          case 33: 
            { return HS_IF;
            }
          case 113: break;
          case 34: 
            { return HS_IN;
            }
          case 114: break;
          case 35: 
            { return HS_DO;
            }
          case 115: break;
          case 36: 
            { return HS_OF;
            }
          case 116: break;
          case 37: 
            { return HS_FLOAT;
            }
          case 117: break;
          case 38: 
            { return HS_COMMENT;
            }
          case 118: break;
          case 39: 
            { return HS_NCOMMENT_END;
            }
          case 119: break;
          case 40: 
            { return HS_DOT_DOT;
            }
          case 120: break;
          case 41: 
            { return HS_STRING_LITERAL;
            }
          case 121: break;
          case 42: 
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            }
          case 122: break;
          case 43: 
            { return HS_NCOMMENT_START;
            }
          case 123: break;
          case 44: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            }
          case 124: break;
          case 45: 
            { commentDepth++;
            }
          case 125: break;
          case 46: 
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            }
          case 126: break;
          case 47: 
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            }
          case 127: break;
          case 48: 
            { qqDepth++;
            }
          case 128: break;
          case 49: 
            { return HS_DIRECTIVE;
            }
          case 129: break;
          case 50: 
            { return HS_PRAGMA_END;
            }
          case 130: break;
          case 51: 
            { return HS_SHEBANG_LINE;
            }
          case 131: break;
          case 52: 
            { return HS_LET;
            }
          case 132: break;
          case 53: 
            { return HS_OCTAL;
            }
          case 133: break;
          case 54: 
            { return HS_HEXADECIMAL;
            }
          case 134: break;
          case 55: 
            { return HS_CHARACTER_LITERAL;
            }
          case 135: break;
          case 56: 
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          case 136: break;
          case 57: 
            { return HS_PRAGMA_START;
            }
          case 137: break;
          case 58: 
            { haddockDepth++;
            }
          case 138: break;
          case 59: 
            { return HS_DATA;
            }
          case 139: break;
          case 60: 
            { return HS_ELSE;
            }
          case 140: break;
          case 61: 
            { return HS_CASE;
            }
          case 141: break;
          case 62: 
            { return HS_HADDOCK;
            }
          case 142: break;
          case 63: 
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            }
          case 143: break;
          case 64: 
            { return HS_TYPE;
            }
          case 144: break;
          case 65: 
            { return HS_THEN;
            }
          case 145: break;
          case 66: 
            { return HS_INFIX;
            }
          case 146: break;
          case 67: 
            { return HS_CLASS;
            }
          case 147: break;
          case 68: 
            { return HS_WHERE;
            }
          case 148: break;
          case 69: 
            { return HS_INFIXL;
            }
          case 149: break;
          case 70: 
            { return HS_INFIXR;
            }
          case 150: break;
          case 71: 
            { return HS_IMPORT;
            }
          case 151: break;
          case 72: 
            { return HS_MODULE;
            }
          case 152: break;
          case 73: 
            { return HS_DEFAULT;
            }
          case 153: break;
          case 74: 
            { return HS_NEWTYPE;
            }
          case 154: break;
          case 75: 
            { return HS_INSTANCE;
            }
          case 155: break;
          case 76: 
            { return HS_DERIVING;
            }
          case 156: break;
          case 77: 
            { return HS_TYPE_FAMILY;
            }
          case 157: break;
          case 78: 
            { return HS_TYPE_INSTANCE;
            }
          case 158: break;
          case 79: 
            { return HS_FOREIGN_IMPORT;
            }
          case 159: break;
          case 80: 
            { return HS_FOREIGN_EXPORT;
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
