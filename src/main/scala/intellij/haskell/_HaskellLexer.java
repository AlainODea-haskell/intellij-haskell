/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int NCOMMENT = 2;
    public static final int NHADDOCK = 4;
    public static final int QQ = 6;
    public static final int OPTIONS_GHC = 8;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [9, 7, 5]
     * Total runtime size is 3424 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 12] << 7) | ((ch >> 5) & 0x7f)] << 5) | (ch & 0x1f)];
    }

    /* The ZZ_CMAP_Z table has 272 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\32\1\1\3\362\1");

    /* The ZZ_CMAP_Y table has 512 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\24\6\1\10\1\11\1\12\341\6\1\13\1\14\1\6\1" +
                    "\15\1\16\3\6\1\17\1\20\2\6\1\21\1\6\1\22\1\6\1\23\1\24\1\6\1\25\1\26\1\27" +
                    "\1\30\31\6\1\27\36\6\1\31\122\6\1\32\10\6\1\33\14\6\1\34\107\6");

    /* The ZZ_CMAP_A table has 928 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\5\0\1\3\3\0\1\3\1\2\2\3\1\1\22\0\1\36\1\73\1\72\1\4\2\73\1\42\1\71\1\113" +
                    "\1\114\1\74\1\75\1\115\1\25\1\35\1\73\1\30\4\64\3\33\2\23\1\106\1\116\1\77" +
                    "\1\102\1\100\1\101\1\103\1\54\1\57\1\55\1\27\1\37\1\60\1\67\1\51\1\63\1\22" +
                    "\1\56\1\47\1\66\1\45\1\34\1\70\1\53\1\62\1\50\1\52\1\46\1\61\1\22\1\32\1\65" +
                    "\1\22\1\117\1\20\1\40\1\44\1\41\1\120\1\26\1\125\1\16\1\7\1\10\1\6\1\126\1" +
                    "\135\1\5\2\21\1\12\1\133\1\11\1\15\1\132\1\21\1\14\1\13\1\130\1\17\1\43\1" +
                    "\134\1\31\1\131\1\21\1\121\1\104\1\122\1\105\6\0\1\127\32\0\1\3\5\0\1\74\5" +
                    "\0\1\74\12\0\1\74\7\0\1\74\67\0\1\74\31\0\31\22\7\0\31\21\52\0\1\74\23\0\2" +
                    "\127\22\0\1\74\23\0\12\24\6\0\12\24\30\0\1\22\22\0\1\22\4\0\1\22\2\0\1\22" +
                    "\6\0\1\22\53\0\1\110\1\0\1\111\37\0\1\112\15\0\1\123\4\0\1\74\2\0\2\74\10" +
                    "\0\1\74\5\0\1\76\12\0\2\74\2\0\2\74\16\0\1\107\10\0\6\74\10\0\2\74\45\0\1" +
                    "\74\6\0\1\74\10\0\1\74\37\0\1\74\1\124\63\0\1\74\33\0\1\21\20\0\1\21\30\0" +
                    "\1\74\37\0");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\5\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7" +
                    "\2\10\1\4\1\10\1\11\1\3\1\12\1\13\1\4" +
                    "\1\14\1\15\3\4\1\16\1\17\1\20\1\21\1\22" +
                    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32" +
                    "\1\33\1\34\1\35\1\36\1\37\3\5\11\40\5\0" +
                    "\1\4\1\41\1\42\3\5\1\43\4\5\1\44\2\5" +
                    "\3\0\1\45\5\0\1\22\1\0\1\46\4\0\1\47" +
                    "\1\50\4\5\1\51\1\52\1\53\1\54\1\55\3\0" +
                    "\1\56\1\0\1\57\6\0\1\60\11\5\1\61\2\5" +
                    "\1\0\1\62\1\0\1\62\3\45\1\63\1\64\1\65" +
                    "\17\0\1\22\20\0\1\66\1\67\4\5\1\70\1\57" +
                    "\7\0\6\5\1\71\1\72\2\5\1\73\1\0\1\45" +
                    "\1\74\1\45\31\0\1\75\1\76\2\5\1\57\3\0" +
                    "\1\77\6\5\1\100\5\0\1\5\1\101\1\0\1\102" +
                    "\1\103\1\5\1\104\4\5\6\0\1\105\2\5\1\106" +
                    "\1\5\1\107\2\0\1\74\3\0\1\110\1\0\1\111" +
                    "\2\0\2\74\27\0\1\112\2\0\1\45\7\0\1\113" +
                    "\1\114\1\115\1\0\1\116\2\0\1\74";

    private static int[] zzUnpackAction() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\136\0\274\0\u011a\0\u0178\0\u01d6\0\u0234\0\u01d6" +
                    "\0\u0292\0\u02f0\0\u034e\0\u03ac\0\u040a\0\u0468\0\u04c6\0\u0524" +
                    "\0\u0582\0\u05e0\0\u063e\0\u069c\0\u06fa\0\u0758\0\u07b6\0\u0814" +
                    "\0\u0872\0\u01d6\0\u08d0\0\u01d6\0\u0582\0\u092e\0\u098c\0\u09ea" +
                    "\0\u0a48\0\u0aa6\0\u0b04\0\u0b62\0\u092e\0\u092e\0\u092e\0\u0bc0" +
                    "\0\u092e\0\u092e\0\u092e\0\u092e\0\u01d6\0\u01d6\0\u01d6\0\u01d6" +
                    "\0\u0c1e\0\u01d6\0\u0c7c\0\u01d6\0\u01d6\0\u0cda\0\u0d38\0\u0d96" +
                    "\0\u01d6\0\u0df4\0\u0e52\0\u0eb0\0\u0f0e\0\u0f6c\0\u0fca\0\u1028" +
                    "\0\u1086\0\u10e4\0\u1142\0\u11a0\0\u11fe\0\u125c\0\u12ba\0\u0582" +
                    "\0\u1318\0\u1376\0\u13d4\0\u1432\0\u0582\0\u1490\0\u14ee\0\u154c" +
                    "\0\u15aa\0\u0582\0\u1608\0\u1666\0\u16c4\0\u1722\0\u1780\0\u17de" +
                    "\0\u183c\0\u189a\0\u18f8\0\u1956\0\u19b4\0\u1a12\0\u09ea\0\u01d6" +
                    "\0\u1a70\0\u1ace\0\u0c1e\0\u1b2c\0\u01d6\0\u1b8a\0\u1be8\0\u1c46" +
                    "\0\u1ca4\0\u1d02\0\u01d6\0\u01d6\0\u01d6\0\u01d6\0\u01d6\0\u1d60" +
                    "\0\u1028\0\u1dbe\0\u01d6\0\u1e1c\0\u1e7a\0\u1ed8\0\u1f36\0\u1f94" +
                    "\0\u1ff2\0\u2050\0\u20ae\0\u01d6\0\u210c\0\u216a\0\u21c8\0\u2226" +
                    "\0\u2284\0\u22e2\0\u2340\0\u239e\0\u23fc\0\u0582\0\u245a\0\u24b8" +
                    "\0\u2516\0\u2574\0\u2574\0\u25d2\0\u2630\0\u268e\0\u26ec\0\u189a" +
                    "\0\u18f8\0\u01d6\0\u274a\0\u27a8\0\u2806\0\u2864\0\u28c2\0\u2920" +
                    "\0\u297e\0\u29dc\0\u2a3a\0\u2a98\0\u2af6\0\u2b54\0\u2bb2\0\u2c10" +
                    "\0\u2c6e\0\u2ccc\0\u2d2a\0\u2d88\0\u2de6\0\u2e44\0\u2ea2\0\u2f00" +
                    "\0\u2f5e\0\u2fbc\0\u301a\0\u3078\0\u30d6\0\u3134\0\u3192\0\u31f0" +
                    "\0\u324e\0\u32ac\0\u330a\0\u01d6\0\u3368\0\u33c6\0\u3424\0\u3482" +
                    "\0\u01d6\0\u34e0\0\u353e\0\u359c\0\u35fa\0\u3658\0\u36b6\0\u3714" +
                    "\0\u3772\0\u37d0\0\u382e\0\u388c\0\u38ea\0\u3948\0\u39a6\0\u0582" +
                    "\0\u0582\0\u3a04\0\u3a62\0\u0582\0\u3ac0\0\u3b1e\0\u3b7c\0\u3bda" +
                    "\0\u3c38\0\u3c96\0\u3cf4\0\u3d52\0\u3db0\0\u3e0e\0\u3e6c\0\u3eca" +
                    "\0\u3f28\0\u3f86\0\u3fe4\0\u4042\0\u40a0\0\u40fe\0\u415c\0\u41ba" +
                    "\0\u4218\0\u4276\0\u42d4\0\u4332\0\u4390\0\u43ee\0\u444c\0\u330a" +
                    "\0\u44aa\0\u4508\0\u0582\0\u4566\0\u45c4\0\u4622\0\u4680\0\u46de" +
                    "\0\u473c\0\u479a\0\u47f8\0\u4856\0\u48b4\0\u4912\0\u4970\0\u49ce" +
                    "\0\u0582\0\u4a2c\0\u4a8a\0\u4ae8\0\u4b46\0\u4ba4\0\u4c02\0\u0582" +
                    "\0\u4c60\0\u0582\0\u0582\0\u4cbe\0\u0582\0\u4d1c\0\u4d7a\0\u4dd8" +
                    "\0\u4e36\0\u4e94\0\u4ef2\0\u4f50\0\u4fae\0\u500c\0\u506a\0\u0582" +
                    "\0\u50c8\0\u5126\0\u0582\0\u5184\0\u0582\0\u51e2\0\u5240\0\u529e" +
                    "\0\u52fc\0\u535a\0\u53b8\0\u0582\0\u5416\0\u0582\0\u5474\0\u54d2" +
                    "\0\u5530\0\u558e\0\u55ec\0\u564a\0\u56a8\0\u5706\0\u5764\0\u57c2" +
                    "\0\u5820\0\u587e\0\u58dc\0\u593a\0\u5998\0\u59f6\0\u5a54\0\u5ab2" +
                    "\0\u5b10\0\u5b6e\0\u5bcc\0\u5c2a\0\u5c88\0\u5ce6\0\u5d44\0\u5da2" +
                    "\0\u5e00\0\u01d6\0\u5e5e\0\u5ebc\0\u01d6\0\u5f1a\0\u5f78\0\u5fd6" +
                    "\0\u6034\0\u6092\0\u60f0\0\u614e\0\u01d6\0\u01d6\0\u01d6\0\u61ac" +
                    "\0\u01d6\0\u620a\0\u6268\0\u62c6";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\2\21\1\22\1\23\1\21\1\24" +
                    "\1\21\1\25\1\26\1\27\1\30\1\21\1\25\1\31" +
                    "\1\21\1\25\1\26\1\25\1\32\1\33\1\25\1\34" +
                    "\1\35\1\36\1\21\1\36\17\25\1\26\4\25\1\37" +
                    "\1\40\2\36\1\41\1\36\1\42\1\36\1\43\1\44" +
                    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54" +
                    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64" +
                    "\1\65\1\6\2\21\1\6\1\66\2\21\1\67\1\70" +
                    "\1\21\1\71\1\72\23\71\1\73\73\71\1\74\5\71" +
                    "\1\0\7\71\1\72\23\71\1\75\73\71\1\76\5\71" +
                    "\1\0\7\71\1\72\102\71\1\77\12\71\1\100\7\71" +
                    "\1\0\7\71\1\72\2\71\1\101\122\71\1\0\6\71" +
                    "\137\0\1\11\1\10\1\11\32\0\1\11\100\0\1\11" +
                    "\1\0\1\11\32\0\1\11\100\0\1\102\1\0\1\102" +
                    "\1\36\1\103\1\0\1\104\1\105\6\0\1\106\1\36" +
                    "\4\0\1\107\7\0\1\36\1\102\3\0\1\36\1\0" +
                    "\1\36\26\0\14\36\34\0\1\21\1\110\2\21\1\111" +
                    "\6\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\3\21\1\112\2\21\5\0\10\21\1\113\2\21\1\0" +
                    "\4\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\6\21\5\0" +
                    "\3\21\1\114\4\21\1\115\2\21\1\0\4\21\1\0" +
                    "\1\116\6\21\2\0\1\21\1\0\1\21\1\0\1\21" +
                    "\1\0\25\21\33\0\2\21\1\0\6\21\5\0\5\21" +
                    "\1\117\5\21\1\0\4\21\1\0\7\21\2\0\1\21" +
                    "\1\0\1\21\1\0\1\21\1\0\25\21\33\0\2\21" +
                    "\1\0\6\21\5\0\3\21\1\120\7\21\1\0\4\21" +
                    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21" +
                    "\1\0\25\21\33\0\2\21\1\0\6\21\5\0\3\21" +
                    "\1\121\7\21\1\0\4\21\1\0\7\21\2\0\1\21" +
                    "\1\0\1\21\1\0\1\21\1\0\25\21\33\0\2\21" +
                    "\1\0\6\21\5\0\13\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\5\0\1\21\1\122\11\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\5\21\1\123\5\21\1\0\4\21\1\0\1\124" +
                    "\6\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\6\21\4\0\1\36\13\0" +
                    "\1\36\4\0\1\36\7\0\1\36\4\0\1\36\1\0" +
                    "\1\36\26\0\14\36\16\0\1\125\15\0\13\25\1\0" +
                    "\4\25\1\0\7\25\2\0\1\25\1\0\1\25\1\0" +
                    "\1\25\1\0\25\25\33\0\2\25\1\0\6\25\10\0" +
                    "\1\126\12\0\1\26\1\27\3\0\1\26\2\0\1\26" +
                    "\1\0\1\127\1\0\1\126\24\0\1\26\74\0\2\27" +
                    "\3\0\1\27\2\0\1\27\30\0\1\27\55\0\1\36" +
                    "\13\0\1\36\2\0\1\26\1\27\1\130\2\0\1\26" +
                    "\2\0\1\26\1\0\1\36\1\131\3\0\1\36\1\0" +
                    "\1\36\17\0\1\26\6\0\5\36\1\53\6\36\37\0" +
                    "\1\126\4\0\1\132\5\0\1\26\1\27\3\0\1\26" +
                    "\2\133\1\26\1\132\1\127\1\0\1\126\24\0\1\26" +
                    "\52\0\1\11\1\0\1\11\31\0\1\127\1\11\103\0" +
                    "\1\36\13\0\1\36\4\0\1\36\7\0\1\36\4\0" +
                    "\1\36\1\0\1\36\26\0\14\36\27\0\2\134\1\0" +
                    "\15\134\1\135\50\134\1\0\14\134\1\136\27\134\2\137" +
                    "\1\140\15\137\1\141\51\137\1\140\43\137\4\0\1\36" +
                    "\13\0\1\36\2\0\1\26\1\27\1\36\2\0\1\26" +
                    "\2\0\1\26\1\0\1\36\1\131\3\0\1\36\1\0" +
                    "\1\36\17\0\1\26\6\0\14\36\33\0\1\36\13\0" +
                    "\1\36\4\0\1\52\7\0\1\36\4\0\1\36\1\0" +
                    "\1\36\26\0\14\36\33\0\1\36\13\21\1\36\1\21" +
                    "\3\0\1\36\1\21\2\0\1\21\3\0\1\36\3\0" +
                    "\1\21\1\36\1\21\1\36\26\0\14\36\16\0\2\21" +
                    "\1\0\6\21\4\0\1\36\13\0\1\36\4\0\1\36" +
                    "\7\0\1\36\4\0\1\36\1\0\1\36\26\0\5\36" +
                    "\1\54\6\36\33\0\1\36\13\0\1\36\4\0\1\36" +
                    "\7\0\1\36\4\0\1\36\1\0\1\36\26\0\13\36" +
                    "\1\51\34\0\13\142\1\0\2\142\3\0\2\142\1\0" +
                    "\2\142\1\0\1\142\1\143\1\0\1\142\1\0\1\142" +
                    "\1\0\1\142\1\0\17\142\1\0\4\142\5\0\1\143" +
                    "\2\0\1\144\2\0\1\145\20\0\2\142\1\0\6\142" +
                    "\25\0\1\146\115\0\13\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\1\21\1\147\3\21\1\150\5\0" +
                    "\10\21\1\151\2\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\6\21\5\0\13\21\1\0\4\21\1\0" +
                    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\5\21\1\152\2\0\1\71" +
                    "\255\0\1\153\40\0\1\154\232\0\1\155\40\0\1\156" +
                    "\150\0\1\157\102\0\13\160\1\0\2\160\3\0\2\160" +
                    "\1\0\2\160\1\0\1\160\1\161\1\0\1\160\1\0" +
                    "\1\160\1\0\1\160\1\0\17\160\1\0\4\160\5\0" +
                    "\1\161\2\0\1\162\2\0\1\163\20\0\2\160\1\0" +
                    "\6\160\25\0\1\164\111\0\1\102\1\0\1\102\1\0" +
                    "\1\103\1\0\1\104\1\105\6\0\1\106\16\0\1\102" +
                    "\105\0\1\165\2\0\1\166\134\0\1\167\136\0\1\170" +
                    "\1\171\1\0\1\172\132\0\1\173\130\0\1\36\13\0" +
                    "\1\36\4\0\1\36\7\0\1\36\4\0\1\36\1\0" +
                    "\1\36\26\0\14\36\13\0\1\174\20\0\1\21\1\175" +
                    "\4\21\1\176\4\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\6\21\5\0\13\21\1\0\4\21\1\0" +
                    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\2\21\1\177\3\21\5\0" +
                    "\7\21\1\200\3\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\6\21\5\0\1\21\1\201\5\21\1\202" +
                    "\3\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\6\21\5\0\13\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\1\203\5\21\5\0\6\21\1\204\4\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\13\21\1\0\4\21\1\0\7\21\2\0\1\21" +
                    "\1\0\1\21\1\0\1\21\1\0\25\21\33\0\2\21" +
                    "\1\0\4\21\1\205\1\21\5\0\13\21\1\0\4\21" +
                    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21" +
                    "\1\0\25\21\33\0\2\21\1\0\1\206\5\21\5\0" +
                    "\13\21\1\0\4\21\1\0\1\207\6\21\2\0\1\21" +
                    "\1\0\1\21\1\0\1\21\1\0\25\21\33\0\2\21" +
                    "\1\0\6\21\5\0\6\21\1\210\4\21\1\0\4\21" +
                    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21" +
                    "\1\0\25\21\33\0\2\21\1\0\6\21\10\0\1\211" +
                    "\150\0\1\212\1\0\1\213\2\0\1\212\2\0\1\212" +
                    "\30\0\1\212\10\0\1\213\63\0\1\214\4\0\1\214" +
                    "\2\0\1\214\30\0\1\214\51\0\1\215\1\216\1\0" +
                    "\1\217\1\36\30\215\1\36\1\217\3\215\1\36\30\215" +
                    "\1\36\1\215\1\36\1\215\5\36\20\215\1\0\11\215" +
                    "\35\0\1\127\130\0\1\220\2\0\1\220\30\0\1\220" +
                    "\57\0\3\221\5\0\1\221\4\0\1\221\2\0\3\221" +
                    "\2\0\1\221\3\0\1\221\14\0\2\221\1\0\2\221" +
                    "\3\0\1\221\40\0\1\221\101\0\1\222\52\0\1\134" +
                    "\2\0\1\134\2\0\1\134\1\223\2\0\1\134\2\0" +
                    "\2\224\1\0\1\134\1\225\1\224\1\226\1\0\1\224" +
                    "\3\0\1\227\2\0\2\134\1\230\1\231\1\232\1\233" +
                    "\1\234\1\235\2\0\1\236\1\237\1\0\1\240\1\241" +
                    "\1\235\1\232\1\0\1\224\2\0\1\232\1\0\2\134" +
                    "\32\0\1\134\2\0\1\134\11\0\1\242\13\0\1\242" +
                    "\4\0\1\242\7\0\1\242\4\0\1\242\1\0\1\242" +
                    "\24\0\1\222\1\0\14\242\30\0\3\243\2\0\1\137" +
                    "\2\0\1\137\2\0\1\137\1\244\2\0\1\137\2\0" +
                    "\2\137\1\0\1\137\1\245\1\137\1\246\1\0\1\137" +
                    "\2\0\1\243\1\247\2\0\2\137\1\250\1\251\1\252" +
                    "\1\253\1\254\1\255\2\0\1\256\1\257\1\0\1\260" +
                    "\1\261\1\255\1\252\1\0\1\137\2\0\1\252\1\0" +
                    "\2\137\32\0\1\137\2\0\1\137\12\0\13\142\1\0" +
                    "\4\142\1\0\7\142\1\143\1\0\1\142\1\0\1\142" +
                    "\1\0\1\142\1\0\25\142\4\0\1\143\2\0\1\144" +
                    "\2\0\1\145\20\0\2\142\1\0\6\142\5\0\13\142" +
                    "\1\0\1\142\4\0\1\142\2\0\1\142\7\0\1\142" +
                    "\1\0\1\142\61\0\2\142\1\0\6\142\1\0\1\262" +
                    "\1\0\1\262\1\263\31\0\1\262\45\0\1\264\36\0" +
                    "\13\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\2\21\1\265\3\21\5\0\3\21\1\266\7\21\1\0" +
                    "\4\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\6\21\5\0" +
                    "\2\21\1\267\10\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\6\21\5\0\3\21\1\270\7\21\1\0" +
                    "\4\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\6\21\5\0" +
                    "\13\160\1\0\4\160\1\0\7\160\1\161\1\0\1\160" +
                    "\1\0\1\160\1\0\1\160\1\0\25\160\4\0\1\161" +
                    "\2\0\1\162\2\0\1\163\20\0\2\160\1\0\6\160" +
                    "\5\0\13\160\1\0\1\160\4\0\1\160\2\0\1\160" +
                    "\7\0\1\160\1\0\1\160\61\0\2\160\1\0\6\160" +
                    "\122\0\1\271\13\0\1\165\2\0\15\165\1\272\115\165" +
                    "\16\0\1\273\125\0\1\274\136\0\1\275\133\0\1\276" +
                    "\5\0\1\277\136\0\1\300\130\0\1\301\133\0\1\302" +
                    "\12\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\6\21\5\0\13\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\1\303\5\21\5\0\10\21\1\304\2\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\3\21\1\305\7\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\5\0\13\21\1\0\4\21" +
                    "\1\0\1\306\6\21\2\0\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\6\21\5\0" +
                    "\1\307\12\21\1\0\4\21\1\0\7\21\2\0\1\21" +
                    "\1\0\1\21\1\0\1\21\1\0\25\21\33\0\2\21" +
                    "\1\0\6\21\5\0\13\21\1\0\4\21\1\0\1\310" +
                    "\6\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\6\21\5\0\3\21\1\311" +
                    "\7\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\6\21\5\0\13\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\1\312\5\21\5\0\6\21\1\313\4\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\3\21\1\314\7\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\126\0\1\315\32\0\1\212" +
                    "\4\0\1\212\2\0\1\212\30\0\1\212\61\0\1\126" +
                    "\12\0\1\214\4\0\1\214\2\0\1\214\3\0\1\126" +
                    "\24\0\1\214\51\0\1\215\2\0\133\215\1\0\1\316" +
                    "\1\0\1\316\32\0\1\316\5\0\1\317\37\0\1\317" +
                    "\31\0\1\215\1\316\1\0\1\320\32\215\1\320\5\215" +
                    "\1\317\37\215\1\317\31\215\30\0\1\321\2\0\1\321" +
                    "\30\0\1\321\74\0\2\224\3\0\1\224\2\0\1\224" +
                    "\30\0\1\224\4\0\1\222\103\0\1\322\7\0\1\323" +
                    "\5\0\1\324\66\0\3\325\5\0\1\325\4\0\1\325" +
                    "\2\0\3\325\2\0\1\325\3\0\1\325\14\0\2\325" +
                    "\1\0\2\325\3\0\1\325\40\0\1\325\44\0\1\235" +
                    "\10\0\1\326\2\0\1\327\1\0\1\330\13\0\1\134" +
                    "\67\0\1\134\1\0\1\134\4\0\1\134\2\0\1\134" +
                    "\1\0\1\134\2\0\3\134\2\0\20\134\1\0\4\134" +
                    "\12\0\1\134\13\0\1\134\64\0\1\322\5\0\1\331" +
                    "\131\0\1\134\145\0\1\134\111\0\1\332\11\0\1\333" +
                    "\3\0\1\334\10\0\1\134\1\0\1\335\2\0\1\134" +
                    "\117\0\1\134\140\0\1\331\134\0\1\335\5\0\1\134" +
                    "\112\0\1\322\10\0\1\134\135\0\1\134\7\0\1\134" +
                    "\61\0\1\242\13\0\1\242\4\0\1\242\7\0\1\242" +
                    "\4\0\1\242\1\0\1\242\26\0\14\242\30\0\3\243" +
                    "\14\0\1\137\15\0\1\243\127\0\1\137\2\0\1\137" +
                    "\30\0\1\137\110\0\1\336\7\0\1\337\5\0\1\340" +
                    "\66\0\3\137\5\0\1\137\4\0\1\137\2\0\3\137" +
                    "\2\0\1\137\3\0\1\137\14\0\2\137\1\0\2\137" +
                    "\3\0\1\137\40\0\1\137\44\0\1\255\10\0\1\341" +
                    "\2\0\1\342\1\0\1\343\13\0\1\137\67\0\1\137" +
                    "\1\0\1\137\4\0\1\137\2\0\1\137\1\0\1\137" +
                    "\2\0\3\137\2\0\20\137\1\0\4\137\12\0\1\137" +
                    "\13\0\1\137\64\0\1\336\5\0\1\344\131\0\1\137" +
                    "\145\0\1\137\111\0\1\137\11\0\1\345\3\0\1\346" +
                    "\10\0\1\137\1\0\1\347\2\0\1\137\117\0\1\137" +
                    "\140\0\1\344\134\0\1\347\5\0\1\137\112\0\1\336" +
                    "\10\0\1\137\135\0\1\137\7\0\1\137\161\0\1\264" +
                    "\32\0\1\350\1\0\1\350\30\0\1\351\1\0\1\350" +
                    "\104\0\3\21\1\352\7\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\5\0\4\21\1\353\6\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\12\21\1\354\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\6\21\5\0\7\21\1\355\3\21\1\0" +
                    "\4\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\6\21\1\165" +
                    "\1\356\16\165\1\272\115\165\12\0\1\357\130\0\1\360" +
                    "\135\0\1\276\136\0\1\165\137\0\1\165\142\0\1\361" +
                    "\130\0\1\276\132\0\13\21\1\0\4\21\1\0\3\21" +
                    "\1\362\3\21\2\0\1\21\1\0\1\21\1\0\1\21" +
                    "\1\0\25\21\33\0\2\21\1\0\6\21\5\0\13\21" +
                    "\1\0\4\21\1\0\1\363\6\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\6\21\5\0\7\21\1\364\3\21\1\0\4\21\1\0" +
                    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\6\21\5\0\1\365\12\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\12\21\1\366\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\6\21\5\0\13\21\1\0\4\21\1\0" +
                    "\7\21\2\0\1\21\1\0\1\21\1\0\1\367\1\0" +
                    "\25\21\33\0\2\21\1\0\6\21\5\0\13\21\1\0" +
                    "\4\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\1\21\1\370" +
                    "\4\21\5\0\6\21\1\371\4\21\1\0\4\21\1\0" +
                    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\6\21\5\0\1\372\131\0" +
                    "\1\316\1\0\1\316\32\0\1\316\77\0\1\317\1\373" +
                    "\1\374\133\317\1\215\1\316\1\0\1\320\32\215\1\320" +
                    "\77\215\30\0\1\321\2\0\1\321\30\0\1\321\4\0" +
                    "\1\222\113\0\1\134\125\0\1\134\162\0\1\134\57\0" +
                    "\3\325\5\0\1\325\4\0\1\325\2\0\3\325\2\0" +
                    "\1\325\3\0\1\325\14\0\2\325\1\0\2\325\3\0" +
                    "\1\325\4\0\1\222\33\0\1\325\63\0\1\134\137\0" +
                    "\1\134\112\0\1\134\24\0\1\134\134\0\1\134\130\0" +
                    "\1\134\17\0\1\222\123\0\1\134\110\0\1\134\150\0" +
                    "\1\134\137\0\1\137\125\0\1\137\162\0\1\137\124\0" +
                    "\1\137\137\0\1\137\112\0\1\137\24\0\1\137\134\0" +
                    "\1\137\136\0\1\137\110\0\1\137\150\0\1\137\160\0" +
                    "\1\375\52\0\13\21\1\0\4\21\1\0\7\21\1\0" +
                    "\1\376\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\5\0\5\21\1\377\5\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\3\21\1\u0100\7\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\1\165\1\0\16\165\1\272" +
                    "\115\165\17\0\1\u0101\127\0\1\277\140\0\1\165\126\0" +
                    "\5\21\1\u0102\1\21\1\u0103\3\21\1\0\4\21\1\0" +
                    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\6\21\5\0\4\21\1\u0104" +
                    "\6\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\6\21\5\0\13\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\1\u0105\5\21\5\0\13\21\1\0\4\21" +
                    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21" +
                    "\1\0\25\21\33\0\1\21\1\u0106\1\0\6\21\5\0" +
                    "\5\21\1\u0107\5\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\6\21\5\0\1\u0108\12\21\1\0\4\21" +
                    "\1\0\7\21\2\0\1\21\1\0\1\21\1\0\1\21" +
                    "\1\0\25\21\33\0\2\21\1\0\6\21\5\0\13\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\2\21" +
                    "\1\u0109\3\21\11\0\1\u010a\125\0\3\374\14\0\1\u010b" +
                    "\4\0\1\u010c\10\0\1\374\100\0\1\374\1\0\1\374" +
                    "\14\0\1\u010b\4\0\1\u010c\10\0\1\374\151\0\1\u010d" +
                    "\70\0\1\u010e\1\u010f\134\0\3\21\1\u0110\7\21\1\0" +
                    "\4\21\1\0\7\21\2\0\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\6\21\7\0" +
                    "\1\277\133\0\11\21\1\u0111\1\21\1\0\4\21\1\0" +
                    "\7\21\2\0\1\21\1\0\1\21\1\0\1\21\1\0" +
                    "\25\21\33\0\2\21\1\0\6\21\5\0\4\21\1\u0112" +
                    "\6\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\2\21\1\0" +
                    "\6\21\5\0\13\21\1\0\4\21\1\0\7\21\2\0" +
                    "\1\21\1\0\1\21\1\0\1\21\1\0\25\21\33\0" +
                    "\2\21\1\0\1\u0113\5\21\5\0\4\21\1\u0114\6\21" +
                    "\1\0\4\21\1\0\7\21\2\0\1\21\1\0\1\21" +
                    "\1\0\1\21\1\0\25\21\33\0\2\21\1\0\6\21" +
                    "\5\0\3\21\1\u0115\7\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\121\0\1\u0116\141\0\1\u0117" +
                    "\35\0\1\u0118\173\0\1\u0119\63\0\1\u011a\152\0\1\u011b" +
                    "\114\0\3\21\1\u011c\7\21\1\0\4\21\1\0\7\21" +
                    "\2\0\1\21\1\0\1\21\1\0\1\21\1\0\25\21" +
                    "\33\0\2\21\1\0\6\21\5\0\13\21\1\0\4\21" +
                    "\1\0\7\21\1\0\1\u011d\1\21\1\0\1\21\1\0" +
                    "\1\21\1\0\25\21\33\0\2\21\1\0\6\21\5\0" +
                    "\13\21\1\0\4\21\1\0\7\21\2\0\1\21\1\0" +
                    "\1\21\1\0\1\21\1\0\25\21\33\0\1\21\1\u011e" +
                    "\1\0\6\21\16\0\1\u011f\127\0\1\u0120\125\0\1\317" +
                    "\1\u0121\1\374\1\u0122\1\0\30\317\1\0\1\u0122\3\317" +
                    "\1\0\30\317\1\0\1\317\1\0\1\317\5\0\20\317" +
                    "\1\0\11\317\34\0\1\u0123\114\0\1\u0124\255\0\1\u0125" +
                    "\7\0\1\u0126\2\0\1\u0127\142\0\1\u0128\246\0\1\u0129" +
                    "\10\0\1\u0121\1\374\1\u0121\14\0\1\u010b\4\0\1\u010c" +
                    "\10\0\1\u0121\77\0\1\317\1\u0121\1\374\1\u0122\32\317" +
                    "\1\u0122\77\317\45\0\1\u012a\220\0\1\u012b\12\0\1\u012c" +
                    "\263\0\1\u012d\33\0\1\u012e\113\0\1\u012f\133\0\1\u0130" +
                    "\200\0\1\u0131\113\0\1\u0132\121\0\1\u0133\255\0\1\u0134" +
                    "\135\0\1\u0135\13\0\1\u0136\136\0\1\u0137\165\0\1\u0138" +
                    "\105\0\1\u0139\255\0\1\u013a\21\0\1\u013b\135\0\1\u013c" +
                    "\242\0\1\u013d\134\0\1\u013e\103\0\1\u013f\64\0\1\u0140" +
                    "\133\0\1\u0141\135\0\1\u0142\137\0\1\u0143\170\0\1\u0144" +
                    "\74\0\1\u0145\255\0\1\u0146\135\0\1\u0147\22\0\1\u0148" +
                    "\175\0\1\u0149\67\0\1\u014a\136\0\1\u014b\247\0\1\u014c" +
                    "\14\0\1\373\1\374\133\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[25380];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\5\0\1\11\1\1\1\11\21\1\1\11\1\1\1\11" +
                    "\20\1\4\11\1\1\1\11\1\1\2\11\3\1\1\11" +
                    "\10\1\5\0\16\1\3\0\1\1\5\0\1\1\1\0" +
                    "\1\11\4\0\1\11\5\1\5\11\3\0\1\11\1\0" +
                    "\1\1\6\0\1\11\14\1\1\0\1\1\1\0\6\1" +
                    "\1\11\17\0\1\1\20\0\1\1\1\11\4\1\1\11" +
                    "\1\1\7\0\13\1\1\0\3\1\31\0\5\1\3\0" +
                    "\10\1\5\0\2\1\1\0\10\1\6\0\6\1\2\0" +
                    "\1\1\3\0\1\1\1\0\1\1\2\0\2\1\27\0" +
                    "\1\11\2\0\1\11\7\0\3\11\1\0\1\11\2\0" +
                    "\1\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[332];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public _HaskellLexer() {
        this((java.io.Reader) null);
    }

    private int commentStart;
    private int commentDepth;

    private int optionsGhcStart;
    private int optionsGhcDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public _HaskellLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                switch (zzLexicalState) {
                    case NCOMMENT: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = commentStart;
                        return HS_NOT_TERMINATED_COMMENT;
                    }  // fall though
                    case 333:
                        break;
                    case NHADDOCK: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = haddockStart;
                        return HS_NOT_TERMINATED_COMMENT;
                    }  // fall though
                    case 334:
                        break;
                    case QQ: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = qqStart;
                        return HS_QUASIQUOTE;
                    }  // fall though
                    case 335:
                        break;
                    case OPTIONS_GHC: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = optionsGhcStart;
                        return HS_NOT_TERMINATED_OPTIONS_GHC;
                    }  // fall though
                    case 336:
                        break;
                    default:
                        return null;
                }
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        return com.intellij.psi.TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 79:
                        break;
                    case 2: {
                        return HS_NEWLINE;
                    }
                    // fall through
                    case 80:
                        break;
                    case 3: {
                        return com.intellij.psi.TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 81:
                        break;
                    case 4: {
                        return HS_VARSYM_ID;
                    }
                    // fall through
                    case 82:
                        break;
                    case 5: {
                        return HS_VAR_ID;
                    }
                    // fall through
                    case 83:
                        break;
                    case 6: {
                        return HS_BACKSLASH;
                    }
                    // fall through
                    case 84:
                        break;
                    case 7: {
                        return HS_CON_ID;
                    }
                    // fall through
                    case 85:
                        break;
                    case 8: {
                        return HS_DECIMAL;
                    }
                    // fall through
                    case 86:
                        break;
                    case 9: {
                        return HS_DOT;
                    }
                    // fall through
                    case 87:
                        break;
                    case 10: {
                        return HS_RIGHT_BRACKET;
                    }
                    // fall through
                    case 88:
                        break;
                    case 11: {
                        return HS_UNDERSCORE;
                    }
                    // fall through
                    case 89:
                        break;
                    case 12: {
                        return HS_QUOTE;
                    }
                    // fall through
                    case 90:
                        break;
                    case 13: {
                        return HS_DOUBLE_QUOTE;
                    }
                    // fall through
                    case 91:
                        break;
                    case 14: {
                        return HS_EQUAL;
                    }
                    // fall through
                    case 92:
                        break;
                    case 15: {
                        return HS_AT;
                    }
                    // fall through
                    case 93:
                        break;
                    case 16: {
                        return HS_VERTICAL_BAR;
                    }
                    // fall through
                    case 94:
                        break;
                    case 17: {
                        return HS_TILDE;
                    }
                    // fall through
                    case 95:
                        break;
                    case 18: {
                        return HS_CONSYM_ID;
                    }
                    // fall through
                    case 96:
                        break;
                    case 19: {
                        return HS_COLON_COLON;
                    }
                    // fall through
                    case 97:
                        break;
                    case 20: {
                        return HS_LEFT_ARROW;
                    }
                    // fall through
                    case 98:
                        break;
                    case 21: {
                        return HS_RIGHT_ARROW;
                    }
                    // fall through
                    case 99:
                        break;
                    case 22: {
                        return HS_DOUBLE_RIGHT_ARROW;
                    }
                    // fall through
                    case 100:
                        break;
                    case 23: {
                        return HS_LEFT_PAREN;
                    }
                    // fall through
                    case 101:
                        break;
                    case 24: {
                        return HS_RIGHT_PAREN;
                    }
                    // fall through
                    case 102:
                        break;
                    case 25: {
                        return HS_COMMA;
                    }
                    // fall through
                    case 103:
                        break;
                    case 26: {
                        return HS_SEMICOLON;
                    }
                    // fall through
                    case 104:
                        break;
                    case 27: {
                        return HS_LEFT_BRACKET;
                    }
                    // fall through
                    case 105:
                        break;
                    case 28: {
                        return HS_BACKQUOTE;
                    }
                    // fall through
                    case 106:
                        break;
                    case 29: {
                        return HS_LEFT_BRACE;
                    }
                    // fall through
                    case 107:
                        break;
                    case 30: {
                        return HS_RIGHT_BRACE;
                    }
                    // fall through
                    case 108:
                        break;
                    case 31: {
                        return HS_FORALL;
                    }
                    // fall through
                    case 109:
                        break;
                    case 32: {
                    }
                    // fall through
                    case 110:
                        break;
                    case 33: {
                        return HS_IF;
                    }
                    // fall through
                    case 111:
                        break;
                    case 34: {
                        return HS_IN;
                    }
                    // fall through
                    case 112:
                        break;
                    case 35: {
                        return HS_DO;
                    }
                    // fall through
                    case 113:
                        break;
                    case 36: {
                        return HS_OF;
                    }
                    // fall through
                    case 114:
                        break;
                    case 37: {
                        return HS_COMMENT;
                    }
                    // fall through
                    case 115:
                        break;
                    case 38: {
                        return HS_STRING_LITERAL;
                    }
                    // fall through
                    case 116:
                        break;
                    case 39: {
                        yybegin(QQ);
                        qqDepth = 0;
                        qqStart = getTokenStart();
                    }
                    // fall through
                    case 117:
                        break;
                    case 40: {
                        yybegin(NCOMMENT);
                        commentDepth = 0;
                        commentStart = getTokenStart();
                    }
                    // fall through
                    case 118:
                        break;
                    case 41: {
                        if (commentDepth > 0) {
                            commentDepth--;
                        } else {
                            int state = yystate();
                            yybegin(YYINITIAL);
                            zzStartRead = commentStart;
                            return HS_NCOMMENT;
                        }
                    }
                    // fall through
                    case 119:
                        break;
                    case 42: {
                        commentDepth++;
                    }
                    // fall through
                    case 120:
                        break;
                    case 43: {
                        if (haddockDepth > 0) {
                            haddockDepth--;
                        } else {
                            int state = yystate();
                            yybegin(YYINITIAL);
                            zzStartRead = haddockStart;
                            return HS_NHADDOCK;
                        }
                    }
                    // fall through
                    case 121:
                        break;
                    case 44: {
                        haddockDepth++;
                    }
                    // fall through
                    case 122:
                        break;
                    case 45: {
                        if (qqDepth > 0) {
                            qqDepth--;
                        } else {
                            int state = yystate();
                            yybegin(YYINITIAL);
                            zzStartRead = qqStart;
                            return HS_QUASIQUOTE;
                        }
                    }
                    // fall through
                    case 123:
                        break;
                    case 46: {
                        qqDepth++;
                    }
                    // fall through
                    case 124:
                        break;
                    case 47: {
                        return HS_DIRECTIVE;
                    }
                    // fall through
                    case 125:
                        break;
                    case 48: {
                        return HS_PRAGMA_END;
                    }
                    // fall through
                    case 126:
                        break;
                    case 49: {
                        return HS_LET;
                    }
                    // fall through
                    case 127:
                        break;
                    case 50: {
                        return HS_FLOAT;
                    }
                    // fall through
                    case 128:
                        break;
                    case 51: {
                        return HS_OCTAL;
                    }
                    // fall through
                    case 129:
                        break;
                    case 52: {
                        return HS_HEXADECIMAL;
                    }
                    // fall through
                    case 130:
                        break;
                    case 53: {
                        return HS_CHARACTER_LITERAL;
                    }
                    // fall through
                    case 131:
                        break;
                    case 54: {
                        return HS_PRAGMA_START;
                    }
                    // fall through
                    case 132:
                        break;
                    case 55: {
                        yybegin(NHADDOCK);
                        haddockDepth = 0;
                        haddockStart = getTokenStart();
                    }
                    // fall through
                    case 133:
                        break;
                    case 56: {
                        int state = yystate();
                        yybegin(YYINITIAL);
                        zzStartRead = optionsGhcStart;
                        return HS_OPTIONS_GHC;
                    }
                    // fall through
                    case 134:
                        break;
                    case 57: {
                        return HS_DATA;
                    }
                    // fall through
                    case 135:
                        break;
                    case 58: {
                        return HS_ELSE;
                    }
                    // fall through
                    case 136:
                        break;
                    case 59: {
                        return HS_CASE;
                    }
                    // fall through
                    case 137:
                        break;
                    case 60: {
                        return HS_HADDOCK;
                    }
                    // fall through
                    case 138:
                        break;
                    case 61: {
                        return HS_TYPE;
                    }
                    // fall through
                    case 139:
                        break;
                    case 62: {
                        return HS_THEN;
                    }
                    // fall through
                    case 140:
                        break;
                    case 63: {
                        return HS_INFIX;
                    }
                    // fall through
                    case 141:
                        break;
                    case 64: {
                        return HS_CLASS;
                    }
                    // fall through
                    case 142:
                        break;
                    case 65: {
                        return HS_WHERE;
                    }
                    // fall through
                    case 143:
                        break;
                    case 66: {
                        return HS_INFIXL;
                    }
                    // fall through
                    case 144:
                        break;
                    case 67: {
                        return HS_INFIXR;
                    }
                    // fall through
                    case 145:
                        break;
                    case 68: {
                        return HS_IMPORT;
                    }
                    // fall through
                    case 146:
                        break;
                    case 69: {
                        return HS_MODULE;
                    }
                    // fall through
                    case 147:
                        break;
                    case 70: {
                        return HS_DEFAULT;
                    }
                    // fall through
                    case 148:
                        break;
                    case 71: {
                        return HS_NEWTYPE;
                    }
                    // fall through
                    case 149:
                        break;
                    case 72: {
                        return HS_INSTANCE;
                    }
                    // fall through
                    case 150:
                        break;
                    case 73: {
                        return HS_DERIVING;
                    }
                    // fall through
                    case 151:
                        break;
                    case 74: {
                        return HS_TYPE_FAMILY;
                    }
                    // fall through
                    case 152:
                        break;
                    case 75: {
                        return HS_TYPE_INSTANCE;
                    }
                    // fall through
                    case 153:
                        break;
                    case 76: {
                        return HS_FOREIGN_IMPORT;
                    }
                    // fall through
                    case 154:
                        break;
                    case 77: {
                        return HS_FOREIGN_EXPORT;
                    }
                    // fall through
                    case 155:
                        break;
                    case 78: {
                        yybegin(OPTIONS_GHC);
                        optionsGhcDepth = 0;
                        optionsGhcStart = getTokenStart();
                    }
                    // fall through
                    case 156:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
