/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package intellij.haskell;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static intellij.haskell.psi.HaskellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_HaskellLexer.flex</tt>
 */
public class _HaskellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NCOMMENT = 2;
  public static final int NHADDOCK = 4;
  public static final int QQ = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 7, 5]
   * Total runtime size is 2592 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>12]<<7)|((ch>>5)&0x7f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\u010d\1");

  /* The ZZ_CMAP_Y table has 384 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\26\6\1\7\1\10\1\11\342\6\1\12\1\6\1\13\1\14\7\6\1"+
    "\15\1\6\1\16\1\6\1\17\1\20\1\6\1\21\1\22\33\6\1\23\117\6");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\0\1\3\3\0\1\3\1\2\2\35\1\1\22\0\1\126\1\72\1\71\1\4\2\73\1\42\1\70\1\113"+
    "\1\114\1\73\1\74\1\115\1\25\1\75\1\73\1\30\4\64\3\33\2\23\1\106\1\116\1\77"+
    "\1\102\1\100\1\101\1\103\1\54\1\57\1\55\1\27\1\37\1\60\1\67\1\51\1\63\1\22"+
    "\1\56\1\47\1\66\1\45\1\34\1\63\1\53\1\62\1\50\1\52\1\46\1\61\1\22\1\32\1\65"+
    "\1\22\1\117\1\20\1\40\1\44\1\41\1\120\1\26\1\124\1\16\1\7\1\10\1\6\1\125\1"+
    "\134\1\5\2\21\1\12\1\132\1\11\1\15\1\131\1\21\1\14\1\13\1\127\1\17\1\43\1"+
    "\133\1\31\1\130\1\21\1\121\1\104\1\122\1\105\6\0\1\36\32\0\1\3\120\0\31\22"+
    "\7\0\31\21\36\0\2\36\46\0\12\24\6\0\12\24\46\0\1\110\1\0\1\111\37\0\1\112"+
    "\15\0\1\123\27\0\1\76\36\0\1\107\13\0\3\73\66\0\1\73\10\0\1\73\32\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\11\5\1\6\1\7"+
    "\2\10\1\4\1\10\1\11\1\12\1\4\1\13\1\14"+
    "\1\4\2\15\2\4\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\3\5\10\40\5\0"+
    "\2\4\1\5\1\41\1\42\3\5\1\43\4\5\1\44"+
    "\2\5\1\0\1\4\1\0\1\7\2\0\1\4\1\45"+
    "\1\25\1\46\4\0\1\22\1\0\1\47\1\0\1\50"+
    "\1\24\1\26\1\22\1\23\3\0\1\51\1\52\4\5"+
    "\1\53\1\54\1\55\1\0\1\56\3\0\1\57\1\60"+
    "\6\0\1\61\1\62\11\5\1\63\2\5\1\64\1\0"+
    "\1\64\1\0\2\45\1\65\1\66\1\67\37\0\2\70"+
    "\1\71\1\70\4\5\1\72\1\0\1\60\7\0\6\5"+
    "\1\73\1\74\2\5\1\75\1\0\1\76\27\0\2\77"+
    "\1\100\1\101\2\5\1\60\3\0\1\102\6\5\1\103"+
    "\4\0\1\5\1\104\1\0\1\105\1\106\1\5\1\107"+
    "\4\5\5\0\1\110\2\5\1\111\1\5\1\112\4\0"+
    "\1\113\1\0\1\114\25\0\1\115\2\0\1\45\5\0"+
    "\1\116\1\117\1\120\3\0\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\135\0\272\0\u0117\0\u0174\0\u01d1\0\u0174\0\u022e"+
    "\0\u028b\0\u02e8\0\u0345\0\u03a2\0\u03ff\0\u045c\0\u04b9\0\u0516"+
    "\0\u0573\0\u05d0\0\u062d\0\u068a\0\u06e7\0\u0744\0\u07a1\0\u07fe"+
    "\0\u0174\0\u0516\0\u085b\0\u08b8\0\u0915\0\u0972\0\u09cf\0\u0174"+
    "\0\u0a2c\0\u0a89\0\u0ae6\0\u085b\0\u085b\0\u085b\0\u0b43\0\u0174"+
    "\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0174\0\u0ba0"+
    "\0\u0174\0\u0bfd\0\u0174\0\u0174\0\u0c5a\0\u0cb7\0\u0d14\0\u0174"+
    "\0\u0d71\0\u0dce\0\u0e2b\0\u0e88\0\u0ee5\0\u0f42\0\u0f9f\0\u0ffc"+
    "\0\u1059\0\u10b6\0\u1113\0\u1170\0\u11cd\0\u122a\0\u1287\0\u0516"+
    "\0\u12e4\0\u1341\0\u139e\0\u13fb\0\u0516\0\u1458\0\u14b5\0\u1512"+
    "\0\u156f\0\u0516\0\u15cc\0\u1629\0\u1686\0\u16e3\0\u1740\0\u179d"+
    "\0\u17fa\0\u1857\0\u18b4\0\u1911\0\u085b\0\u0174\0\u196e\0\u19cb"+
    "\0\u1a28\0\u1a85\0\u1ae2\0\u0915\0\u0174\0\u1b3f\0\u0174\0\u085b"+
    "\0\u085b\0\u1b9c\0\u1b9c\0\u1bf9\0\u0ba0\0\u1c56\0\u0174\0\u1cb3"+
    "\0\u1d10\0\u1d6d\0\u1dca\0\u1e27\0\u0174\0\u0174\0\u0174\0\u1e84"+
    "\0\u0174\0\u1ee1\0\u0f9f\0\u1f3e\0\u0174\0\u1f9b\0\u1ff8\0\u2055"+
    "\0\u20b2\0\u210f\0\u216c\0\u21c9\0\u0174\0\u2226\0\u2283\0\u22e0"+
    "\0\u233d\0\u239a\0\u23f7\0\u2454\0\u24b1\0\u250e\0\u256b\0\u0516"+
    "\0\u25c8\0\u2625\0\u2682\0\u26df\0\u273c\0\u273c\0\u2799\0\u27f6"+
    "\0\u196e\0\u19cb\0\u0174\0\u2853\0\u28b0\0\u290d\0\u296a\0\u29c7"+
    "\0\u2a24\0\u2a81\0\u2ade\0\u2b3b\0\u2b98\0\u2bf5\0\u2c52\0\u2caf"+
    "\0\u2d0c\0\u2d69\0\u2dc6\0\u2e23\0\u2e80\0\u2edd\0\u2f3a\0\u2f97"+
    "\0\u2ff4\0\u3051\0\u30ae\0\u310b\0\u3168\0\u31c5\0\u3222\0\u327f"+
    "\0\u32dc\0\u3339\0\u0174\0\u3396\0\u0174\0\u33f3\0\u3450\0\u34ad"+
    "\0\u350a\0\u3567\0\u0174\0\u35c4\0\u3621\0\u367e\0\u36db\0\u3738"+
    "\0\u3795\0\u37f2\0\u384f\0\u38ac\0\u3909\0\u3966\0\u39c3\0\u3a20"+
    "\0\u3a7d\0\u3ada\0\u0516\0\u0516\0\u3b37\0\u3b94\0\u0516\0\u3bf1"+
    "\0\u3c4e\0\u3cab\0\u3d08\0\u3d65\0\u3dc2\0\u3e1f\0\u3e7c\0\u3ed9"+
    "\0\u3f36\0\u3f93\0\u3ff0\0\u404d\0\u40aa\0\u4107\0\u4164\0\u41c1"+
    "\0\u421e\0\u427b\0\u42d8\0\u4335\0\u4392\0\u43ef\0\u444c\0\u44a9"+
    "\0\u0174\0\u4506\0\u4563\0\u0516\0\u45c0\0\u461d\0\u467a\0\u46d7"+
    "\0\u4734\0\u4791\0\u47ee\0\u484b\0\u48a8\0\u4905\0\u4962\0\u49bf"+
    "\0\u4a1c\0\u0516\0\u4a79\0\u4ad6\0\u4b33\0\u4b90\0\u4bed\0\u0516"+
    "\0\u4c4a\0\u0516\0\u0516\0\u4ca7\0\u0516\0\u4d04\0\u4d61\0\u4dbe"+
    "\0\u4e1b\0\u4e78\0\u4ed5\0\u4f32\0\u4f8f\0\u4fec\0\u0516\0\u5049"+
    "\0\u50a6\0\u0516\0\u5103\0\u0516\0\u5160\0\u51bd\0\u521a\0\u5277"+
    "\0\u0516\0\u52d4\0\u0516\0\u5331\0\u538e\0\u53eb\0\u5448\0\u54a5"+
    "\0\u5502\0\u555f\0\u55bc\0\u5619\0\u5676\0\u56d3\0\u5730\0\u578d"+
    "\0\u57ea\0\u5847\0\u58a4\0\u5901\0\u595e\0\u59bb\0\u5a18\0\u5a75"+
    "\0\u0174\0\u5ad2\0\u5b2f\0\u0174\0\u5b8c\0\u5be9\0\u5c46\0\u5ca3"+
    "\0\u5d00\0\u0174\0\u0174\0\u0174\0\u5d5d\0\u5dba\0\u5e17\0\u5e74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\2\20\1\21\1\22\1\20\1\23"+
    "\1\20\1\24\1\25\1\26\1\27\1\20\1\24\1\30"+
    "\1\20\1\24\1\25\1\24\1\10\1\5\1\24\1\31"+
    "\1\32\1\33\1\20\1\33\17\24\1\25\3\24\1\34"+
    "\1\35\2\33\1\36\1\37\1\40\1\41\1\33\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\2\20\1\10\1\65\2\20\1\66\1\67"+
    "\1\20\1\70\1\71\23\70\1\72\10\70\1\0\62\70"+
    "\1\73\14\70\1\71\23\70\1\74\10\70\1\0\62\70"+
    "\1\75\14\70\1\71\34\70\1\0\45\70\1\76\12\70"+
    "\1\77\15\70\136\0\1\10\1\7\1\10\31\0\1\10"+
    "\70\0\1\10\7\0\1\10\1\0\1\10\31\0\1\10"+
    "\70\0\1\10\7\0\1\100\1\0\1\100\1\33\1\101"+
    "\1\0\1\102\1\103\6\0\1\104\1\33\4\0\1\105"+
    "\7\0\1\100\4\0\1\33\1\0\1\33\25\0\1\106"+
    "\14\33\17\0\1\100\12\0\1\107\1\20\1\110\2\20"+
    "\1\111\6\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\3\20\1\112\2\20\4\0\1\107\10\20\1\113"+
    "\2\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\4\0\1\107\3\20\1\114\4\20\1\115\2\20"+
    "\1\0\4\20\1\0\1\116\6\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\4\0\1\107\5\20\1\117\5\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\4\0\1\107"+
    "\3\20\1\120\7\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\3\20\1\121\7\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\4\0\1\107\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\1\20\1\122\11\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\4\0\1\107\5\20\1\123\5\20\1\0\4\20\1\0"+
    "\1\124\6\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\1\125\2\0"+
    "\1\125\1\126\13\125\1\126\4\125\1\126\7\125\2\0"+
    "\3\125\1\126\1\125\1\126\25\125\15\126\15\125\1\127"+
    "\10\125\4\0\1\130\13\24\1\0\4\24\1\0\7\24"+
    "\2\0\1\24\1\0\1\24\1\0\1\24\1\0\24\24"+
    "\33\0\2\24\1\0\6\24\10\0\1\131\7\0\1\132"+
    "\2\0\1\25\1\26\3\0\1\25\2\0\1\25\3\0"+
    "\1\131\24\0\1\25\73\0\2\26\3\0\1\26\2\0"+
    "\1\26\30\0\1\26\54\0\1\33\13\0\1\133\2\0"+
    "\1\25\1\26\1\134\2\0\1\25\2\0\1\25\6\0"+
    "\1\33\1\0\1\33\17\0\1\25\5\0\6\33\1\135"+
    "\6\33\13\0\1\136\22\0\1\131\4\0\1\137\2\0"+
    "\1\132\2\0\1\25\1\26\3\0\1\25\2\140\1\25"+
    "\1\137\2\0\1\131\24\0\1\25\54\0\1\33\13\0"+
    "\1\33\4\0\1\33\14\0\1\33\1\0\1\33\25\0"+
    "\15\33\26\0\2\141\1\0\15\141\1\142\47\141\1\0"+
    "\15\141\1\143\26\141\2\144\1\145\15\144\1\146\50\144"+
    "\1\145\43\144\4\0\1\33\13\0\1\133\2\0\1\25"+
    "\1\26\1\33\2\0\1\25\2\0\1\25\6\0\1\33"+
    "\1\0\1\33\17\0\1\25\5\0\15\33\123\0\1\147"+
    "\43\0\1\33\13\0\1\33\4\0\1\150\14\0\1\33"+
    "\1\0\1\33\25\0\15\33\32\0\1\33\13\20\1\33"+
    "\1\20\3\0\1\33\1\20\2\0\1\20\7\0\1\20"+
    "\1\33\1\20\1\33\25\0\15\33\15\0\2\20\1\0"+
    "\6\20\4\0\1\33\13\0\1\33\4\0\1\33\14\0"+
    "\1\33\1\0\1\33\25\0\6\33\1\151\6\33\32\0"+
    "\1\152\13\0\1\152\4\0\1\152\14\0\1\152\1\0"+
    "\1\152\25\0\14\152\1\153\33\0\13\154\1\0\2\154"+
    "\3\0\2\154\1\0\2\154\1\0\1\154\2\0\1\154"+
    "\1\0\1\154\1\0\1\154\1\0\17\154\1\0\3\154"+
    "\5\0\2\155\2\0\1\156\2\0\1\157\17\0\2\154"+
    "\1\0\6\154\25\0\1\160\113\0\1\107\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\1\20\1\161"+
    "\3\20\1\162\4\0\1\107\10\20\1\163\2\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\107\13\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\5\20\1\164\2\0\1\70\254\0\1\165\37\0"+
    "\1\166\231\0\1\167\37\0\1\170\147\0\1\171\101\0"+
    "\13\172\1\0\2\172\3\0\2\172\1\0\2\172\1\0"+
    "\1\172\2\0\1\172\1\0\1\172\1\0\1\172\1\0"+
    "\17\172\1\0\3\172\5\0\2\173\2\0\1\174\2\0"+
    "\1\175\17\0\2\172\1\0\6\172\1\0\1\100\1\0"+
    "\1\100\1\0\1\101\1\0\1\102\1\103\6\0\1\104"+
    "\15\0\1\100\70\0\1\100\14\0\1\176\2\0\1\177"+
    "\133\0\1\200\135\0\1\201\1\202\1\0\1\203\131\0"+
    "\1\204\127\0\1\33\13\0\1\33\4\0\1\33\14\0"+
    "\1\33\1\0\1\33\25\0\15\33\13\0\1\205\12\0"+
    "\1\206\2\0\1\206\1\106\13\206\1\106\4\206\1\106"+
    "\14\206\1\106\1\206\1\106\25\206\15\106\26\206\4\0"+
    "\1\107\134\0\1\107\1\20\1\207\4\20\1\210\4\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\4\0\1\107\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\2\20\1\211\3\20\4\0\1\107\7\20"+
    "\1\212\3\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\4\0\1\107\1\20\1\213\5\20\1\214"+
    "\3\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\4\0\1\107\13\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\1\215\5\20\4\0\1\107\6\20"+
    "\1\216\4\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\4\0\1\107\13\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\4\20\1\217\1\20\4\0"+
    "\1\107\13\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\1\220\5\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\1\221\6\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\107\6\20\1\222\4\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\23\0\1\223\4\0\1\223"+
    "\2\0\1\223\30\0\1\223\54\0\1\33\13\0\1\33"+
    "\2\0\1\223\1\0\1\33\2\0\1\223\2\0\1\223"+
    "\6\0\1\33\1\0\1\33\17\0\1\223\5\0\15\33"+
    "\36\0\1\224\12\0\1\223\4\0\1\223\2\0\1\223"+
    "\30\0\1\223\54\0\1\130\153\0\1\225\1\0\1\226"+
    "\2\0\1\225\2\0\1\225\30\0\1\225\7\0\1\226"+
    "\40\0\1\223\2\0\32\223\2\0\76\223\1\125\2\0"+
    "\1\125\1\126\13\125\1\126\4\125\1\126\7\125\2\0"+
    "\3\125\1\126\1\125\1\126\25\125\15\126\26\125\1\227"+
    "\2\0\123\227\1\230\6\227\30\0\1\231\2\0\1\231"+
    "\30\0\1\231\56\0\3\232\5\0\1\232\4\0\1\232"+
    "\2\0\3\232\2\0\1\232\3\0\1\232\14\0\2\232"+
    "\1\0\2\232\3\0\1\232\37\0\1\232\100\0\1\233"+
    "\52\0\1\141\2\0\1\141\2\0\1\141\1\234\2\0"+
    "\1\141\2\0\2\235\1\0\1\141\1\236\1\235\1\237"+
    "\1\0\1\235\3\0\1\240\2\0\2\141\1\241\1\242"+
    "\1\243\1\244\1\245\1\246\2\0\1\247\1\250\1\0"+
    "\1\251\1\252\1\246\1\243\1\0\1\235\2\0\1\243"+
    "\2\141\32\0\1\141\2\0\1\141\11\0\1\152\13\0"+
    "\1\152\4\0\1\152\14\0\1\152\1\0\1\152\23\0"+
    "\1\233\1\0\15\152\27\0\3\253\2\0\1\144\2\0"+
    "\1\144\2\0\1\144\1\254\2\0\1\144\2\0\2\144"+
    "\1\0\1\144\1\255\1\144\1\256\1\0\1\144\1\0"+
    "\1\253\1\0\1\257\2\0\2\144\1\260\1\261\1\262"+
    "\1\263\1\264\1\265\2\0\1\266\1\267\1\0\1\270"+
    "\1\271\1\265\1\262\1\0\1\144\2\0\1\262\2\144"+
    "\32\0\1\144\1\0\1\253\1\144\11\0\1\152\13\0"+
    "\1\152\4\0\1\152\14\0\1\152\1\0\1\152\25\0"+
    "\15\152\32\0\1\272\13\154\1\0\4\154\1\0\7\154"+
    "\2\0\1\154\1\0\1\154\1\0\1\154\1\0\24\154"+
    "\4\0\2\155\2\0\1\156\2\0\1\157\17\0\2\154"+
    "\1\0\6\154\5\0\13\154\1\0\1\154\4\0\1\154"+
    "\2\0\1\154\7\0\1\154\1\0\1\154\60\0\2\154"+
    "\1\0\6\154\1\273\1\274\2\273\1\275\77\273\1\276"+
    "\15\273\1\0\12\273\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\2\20\1\277\3\20"+
    "\4\0\1\107\3\20\1\300\7\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\4\0\1\107\2\20"+
    "\1\301\10\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\4\0\1\107\3\20\1\302\7\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\104\0"+
    "\1\303\34\0\1\304\13\172\1\0\4\172\1\0\7\172"+
    "\2\0\1\172\1\0\1\172\1\0\1\172\1\0\24\172"+
    "\4\0\2\173\2\0\1\174\2\0\1\175\17\0\2\172"+
    "\1\0\6\172\5\0\13\172\1\0\1\172\4\0\1\172"+
    "\2\0\1\172\7\0\1\172\1\0\1\172\60\0\2\172"+
    "\1\0\6\172\1\176\2\0\15\176\1\305\114\176\16\0"+
    "\1\306\124\0\1\307\135\0\1\310\132\0\1\311\5\0"+
    "\1\312\135\0\1\313\127\0\1\314\125\0\1\206\2\0"+
    "\132\206\4\0\1\107\1\315\12\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\4\0\1\107\13\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\1\316"+
    "\5\20\4\0\1\107\10\20\1\317\2\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\4\0\1\107"+
    "\3\20\1\320\7\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\1\321\6\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\107\1\322\12\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\1\323\6\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\107\3\20\1\324\7\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\4\0\1\107\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\1\325\5\20"+
    "\4\0\1\107\6\20\1\326\4\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\4\0\1\107\3\20"+
    "\1\327\7\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\10\0\1\131\12\0\1\223\4\0\1\223"+
    "\2\0\1\223\3\0\1\131\24\0\1\223\175\0\1\330"+
    "\32\0\1\225\4\0\1\225\2\0\1\225\30\0\1\225"+
    "\50\0\1\227\2\0\133\227\2\0\41\227\1\331\37\227"+
    "\1\331\30\227\30\0\1\332\2\0\1\332\30\0\1\332"+
    "\73\0\2\235\3\0\1\235\2\0\1\235\30\0\1\235"+
    "\3\0\1\233\103\0\1\333\7\0\1\334\5\0\1\335"+
    "\65\0\3\336\5\0\1\336\4\0\1\336\2\0\3\336"+
    "\2\0\1\336\3\0\1\336\14\0\2\336\1\0\2\336"+
    "\3\0\1\336\37\0\1\336\44\0\1\246\10\0\1\337"+
    "\2\0\1\340\1\0\1\341\13\0\1\141\66\0\1\141"+
    "\1\0\1\141\4\0\1\141\2\0\1\141\1\0\1\141"+
    "\2\0\3\141\2\0\20\141\1\0\3\141\13\0\1\141"+
    "\13\0\1\141\63\0\1\333\5\0\1\342\130\0\1\141"+
    "\144\0\1\141\110\0\1\343\11\0\1\344\3\0\1\345"+
    "\10\0\1\141\1\0\1\346\121\0\1\141\137\0\1\342"+
    "\133\0\1\346\5\0\1\141\111\0\1\333\10\0\1\141"+
    "\134\0\1\141\7\0\1\141\55\0\3\253\14\0\1\144"+
    "\14\0\1\253\70\0\1\253\36\0\1\144\2\0\1\144"+
    "\30\0\1\144\107\0\1\347\7\0\1\350\5\0\1\351"+
    "\65\0\3\144\5\0\1\144\4\0\1\144\2\0\3\144"+
    "\2\0\1\144\3\0\1\144\14\0\2\144\1\0\2\144"+
    "\3\0\1\144\37\0\1\144\44\0\1\265\10\0\1\352"+
    "\2\0\1\353\1\0\1\354\13\0\1\144\66\0\1\144"+
    "\1\0\1\144\4\0\1\144\2\0\1\144\1\0\1\144"+
    "\2\0\3\144\2\0\20\144\1\0\3\144\13\0\1\144"+
    "\13\0\1\144\63\0\1\347\5\0\1\355\130\0\1\144"+
    "\144\0\1\144\110\0\1\144\11\0\1\356\3\0\1\357"+
    "\10\0\1\144\1\0\1\360\121\0\1\144\137\0\1\355"+
    "\133\0\1\360\5\0\1\144\111\0\1\347\10\0\1\144"+
    "\134\0\1\144\7\0\1\144\60\0\1\272\13\154\1\0"+
    "\2\154\3\0\2\154\1\0\2\154\1\0\1\154\2\0"+
    "\1\154\1\0\1\154\1\0\1\154\1\0\17\154\1\0"+
    "\3\154\5\0\2\155\2\0\1\156\2\0\1\157\17\0"+
    "\2\154\1\0\6\154\2\0\1\273\132\0\1\361\1\362"+
    "\2\361\1\0\115\361\1\0\12\361\4\0\1\107\3\20"+
    "\1\363\7\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\4\0\1\107\4\20\1\364\6\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\107\12\20\1\365\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\7\20\1\366\3\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\4\0\1\304\13\172\1\0\2\172\3\0\2\172\1\0"+
    "\2\172\1\0\1\172\2\0\1\172\1\0\1\172\1\0"+
    "\1\172\1\0\17\172\1\0\3\172\5\0\2\173\2\0"+
    "\1\174\2\0\1\175\17\0\2\172\1\0\6\172\1\176"+
    "\1\367\16\176\1\305\114\176\12\0\1\370\127\0\1\371"+
    "\134\0\1\311\135\0\1\176\136\0\1\176\141\0\1\372"+
    "\127\0\1\311\130\0\1\107\13\20\1\0\4\20\1\0"+
    "\3\20\1\373\3\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\107\13\20\1\0\4\20\1\0\1\374\6\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\7\20\1\375\3\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\4\0\1\107\1\376\12\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\4\0\1\107\12\20\1\377"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\4\0\1\107\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\u0100\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\13\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\1\20\1\u0101\4\20"+
    "\4\0\1\107\6\20\1\u0102\4\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\5\0\1\u0103\127\0"+
    "\1\331\1\u0104\1\u0105\132\331\30\0\1\332\2\0\1\332"+
    "\30\0\1\332\3\0\1\233\113\0\1\141\124\0\1\141"+
    "\161\0\1\141\56\0\3\336\5\0\1\336\4\0\1\336"+
    "\2\0\3\336\2\0\1\336\3\0\1\336\14\0\2\336"+
    "\1\0\2\336\3\0\1\336\3\0\1\233\33\0\1\336"+
    "\63\0\1\141\136\0\1\141\111\0\1\141\24\0\1\141"+
    "\133\0\1\141\127\0\1\141\16\0\1\233\123\0\1\141"+
    "\107\0\1\141\147\0\1\141\136\0\1\144\124\0\1\144"+
    "\161\0\1\144\123\0\1\144\136\0\1\144\111\0\1\144"+
    "\24\0\1\144\133\0\1\144\135\0\1\144\107\0\1\144"+
    "\147\0\1\144\71\0\1\361\136\0\1\107\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\u0106\6\20\4\0"+
    "\1\107\5\20\1\u0107\5\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\6\20\4\0\1\107\3\20\1\u0108"+
    "\7\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\1\176\1\0\16\176\1\305\114\176\17\0\1\u0109"+
    "\126\0\1\312\137\0\1\176\124\0\1\107\5\20\1\u010a"+
    "\1\20\1\u010b\3\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\4\20\1\u010c\6\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\4\0\1\107\13\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\1\u010d\5\20\4\0\1\107\13\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\1\20\1\u010e\1\0\6\20"+
    "\4\0\1\107\5\20\1\u010f\5\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\4\0\1\107\1\u0110"+
    "\12\20\1\0\4\20\1\0\7\20\2\0\1\20\1\0"+
    "\1\20\1\0\1\20\1\0\24\20\33\0\2\20\1\0"+
    "\6\20\4\0\1\107\13\20\1\0\4\20\1\0\7\20"+
    "\2\0\1\20\1\0\1\20\1\0\1\20\1\0\24\20"+
    "\33\0\2\20\1\0\2\20\1\u0111\3\20\11\0\1\u0112"+
    "\124\0\3\u0105\14\0\1\u0113\4\0\1\u0114\7\0\1\u0105"+
    "\70\0\1\u0105\7\0\1\u0105\1\0\1\u0105\14\0\1\u0113"+
    "\4\0\1\u0114\7\0\1\u0105\70\0\1\u0105\13\0\1\u0115"+
    "\1\u0116\132\0\1\107\3\20\1\u0117\7\20\1\0\4\20"+
    "\1\0\7\20\2\0\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\24\20\33\0\2\20\1\0\6\20\7\0\1\312"+
    "\131\0\1\107\11\20\1\u0118\1\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\6\20\4\0\1\107\4\20"+
    "\1\u0119\6\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\0\6\20\4\0\1\107\13\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\2\20\1\0\1\u011a\5\20\4\0\1\107"+
    "\4\20\1\u011b\6\20\1\0\4\20\1\0\7\20\2\0"+
    "\1\20\1\0\1\20\1\0\1\20\1\0\24\20\33\0"+
    "\2\20\1\0\6\20\4\0\1\107\3\20\1\u011c\7\20"+
    "\1\0\4\20\1\0\7\20\2\0\1\20\1\0\1\20"+
    "\1\0\1\20\1\0\24\20\33\0\2\20\1\0\6\20"+
    "\121\0\1\u011d\137\0\1\u011e\35\0\1\331\120\0\1\u011f"+
    "\151\0\1\u0120\112\0\1\107\3\20\1\u0121\7\20\1\0"+
    "\4\20\1\0\7\20\2\0\1\20\1\0\1\20\1\0"+
    "\1\20\1\0\24\20\33\0\2\20\1\0\6\20\4\0"+
    "\1\107\13\20\1\0\4\20\1\0\7\20\2\0\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\24\20\33\0\2\20"+
    "\1\u0122\6\20\4\0\1\107\13\20\1\0\4\20\1\0"+
    "\7\20\2\0\1\20\1\0\1\20\1\0\1\20\1\0"+
    "\24\20\33\0\1\20\1\u0123\1\0\6\20\16\0\1\u0124"+
    "\126\0\1\u0125\137\0\1\u0126\253\0\1\u0127\7\0\1\u0128"+
    "\2\0\1\u0129\141\0\1\u012a\244\0\1\u012b\136\0\1\u012c"+
    "\12\0\1\u012d\261\0\1\u012e\33\0\1\u012f\112\0\1\u0130"+
    "\132\0\1\u0131\155\0\1\u0132\120\0\1\u0133\253\0\1\u0134"+
    "\134\0\1\u0135\13\0\1\u0136\135\0\1\u0137\134\0\1\u0138"+
    "\253\0\1\u0139\21\0\1\u013a\134\0\1\u013b\241\0\1\u013c"+
    "\133\0\1\u013d\31\0\1\u013e\132\0\1\u013f\134\0\1\u0140"+
    "\136\0\1\u0141\126\0\1\u0142\253\0\1\u0143\134\0\1\u0144"+
    "\22\0\1\u0145\126\0\1\u0146\135\0\1\u0147\246\0\1\u0148"+
    "\13\0\1\u0104\1\u0105\132\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24273];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\1\1\1\11\21\1\1\11\6\1\1\11"+
    "\7\1\10\11\1\1\1\11\1\1\2\11\3\1\1\11"+
    "\7\1\5\0\20\1\1\0\1\1\1\0\1\1\2\0"+
    "\3\1\1\11\4\0\1\1\1\0\1\11\1\0\1\11"+
    "\4\1\3\0\1\11\5\1\3\11\1\0\1\11\3\0"+
    "\1\11\1\1\6\0\1\11\16\1\1\0\1\1\1\0"+
    "\4\1\1\11\37\0\1\11\1\1\1\11\5\1\1\11"+
    "\1\0\1\1\7\0\13\1\1\0\1\1\27\0\1\11"+
    "\6\1\3\0\10\1\4\0\2\1\1\0\10\1\5\0"+
    "\6\1\4\0\1\1\1\0\1\1\25\0\1\11\2\0"+
    "\1\11\5\0\3\11\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HaskellLexer() {
    this((java.io.Reader)null);
  }
    private int commentStart;
    private int commentDepth;

    private int haddockStart;
    private int haddockDepth;

    private int qqStart;
    private int qqDepth;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HaskellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        switch (zzLexicalState) {
            case NCOMMENT: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = commentStart;
        return HS_NCOMMENT;
            }
            case 329: break;
            case NHADDOCK: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = haddockStart;
        return HS_NHADDOCK;
            }
            case 330: break;
            case QQ: {
              int state = yystate();
        yybegin(YYINITIAL);
        zzStartRead = qqStart;
        return HS_QUASIQUOTE;
            }
            case 331: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 81: break;
          case 2: 
            { return HS_NEWLINE;
            }
          case 82: break;
          case 3: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 83: break;
          case 4: 
            { return HS_VARSYM_ID;
            }
          case 84: break;
          case 5: 
            { return HS_VAR_ID;
            }
          case 85: break;
          case 6: 
            { return HS_BACKSLASH;
            }
          case 86: break;
          case 7: 
            { return HS_CON_ID;
            }
          case 87: break;
          case 8: 
            { return HS_DECIMAL;
            }
          case 88: break;
          case 9: 
            { return HS_RIGHT_BRACKET;
            }
          case 89: break;
          case 10: 
            { return HS_UNDERSCORE;
            }
          case 90: break;
          case 11: 
            { return HS_QUOTE;
            }
          case 91: break;
          case 12: 
            { return HS_DOUBLE_QUOTE;
            }
          case 92: break;
          case 13: 
            { return HS_DOT;
            }
          case 93: break;
          case 14: 
            { return HS_EQUAL;
            }
          case 94: break;
          case 15: 
            { return HS_AT;
            }
          case 95: break;
          case 16: 
            { return HS_VERTICAL_BAR;
            }
          case 96: break;
          case 17: 
            { return HS_TILDE;
            }
          case 97: break;
          case 18: 
            { return HS_CONSYM_ID;
            }
          case 98: break;
          case 19: 
            { return HS_COLON_COLON;
            }
          case 99: break;
          case 20: 
            { return HS_LEFT_ARROW;
            }
          case 100: break;
          case 21: 
            { return HS_RIGHT_ARROW;
            }
          case 101: break;
          case 22: 
            { return HS_DOUBLE_RIGHT_ARROW;
            }
          case 102: break;
          case 23: 
            { return HS_LEFT_PAREN;
            }
          case 103: break;
          case 24: 
            { return HS_RIGHT_PAREN;
            }
          case 104: break;
          case 25: 
            { return HS_COMMA;
            }
          case 105: break;
          case 26: 
            { return HS_SEMICOLON;
            }
          case 106: break;
          case 27: 
            { return HS_LEFT_BRACKET;
            }
          case 107: break;
          case 28: 
            { return HS_BACKQUOTE;
            }
          case 108: break;
          case 29: 
            { return HS_LEFT_BRACE;
            }
          case 109: break;
          case 30: 
            { return HS_RIGHT_BRACE;
            }
          case 110: break;
          case 31: 
            { return HS_FORALL;
            }
          case 111: break;
          case 32: 
            { 
            }
          case 112: break;
          case 33: 
            { return HS_IF;
            }
          case 113: break;
          case 34: 
            { return HS_IN;
            }
          case 114: break;
          case 35: 
            { return HS_DO;
            }
          case 115: break;
          case 36: 
            { return HS_OF;
            }
          case 116: break;
          case 37: 
            { return HS_COMMENT;
            }
          case 117: break;
          case 38: 
            { return HS_NCOMMENT_END;
            }
          case 118: break;
          case 39: 
            { return HS_STRING_LITERAL;
            }
          case 119: break;
          case 40: 
            { return HS_DOT_DOT;
            }
          case 120: break;
          case 41: 
            { yybegin(QQ);
    qqDepth = 0;
    qqStart = getTokenStart();
            }
          case 121: break;
          case 42: 
            { return HS_NCOMMENT_START;
            }
          case 122: break;
          case 43: 
            { if (commentDepth > 0) {
            commentDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = commentStart;
             return HS_NCOMMENT;
        }
            }
          case 123: break;
          case 44: 
            { commentDepth++;
            }
          case 124: break;
          case 45: 
            { if (haddockDepth > 0) {
            haddockDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = haddockStart;
             return HS_NHADDOCK;
        }
            }
          case 125: break;
          case 46: 
            { if (qqDepth > 0) {
            qqDepth--;
        }
        else {
             int state = yystate();
             yybegin(YYINITIAL);
             zzStartRead = qqStart;
             return HS_QUASIQUOTE;
        }
            }
          case 126: break;
          case 47: 
            { qqDepth++;
            }
          case 127: break;
          case 48: 
            { return HS_DIRECTIVE;
            }
          case 128: break;
          case 49: 
            { return HS_PRAGMA_END;
            }
          case 129: break;
          case 50: 
            { return HS_SHEBANG_LINE;
            }
          case 130: break;
          case 51: 
            { return HS_LET;
            }
          case 131: break;
          case 52: 
            { return HS_FLOAT;
            }
          case 132: break;
          case 53: 
            { return HS_OCTAL;
            }
          case 133: break;
          case 54: 
            { return HS_HEXADECIMAL;
            }
          case 134: break;
          case 55: 
            { return HS_CHARACTER_LITERAL;
            }
          case 135: break;
          case 56: 
            { yybegin(NCOMMENT);
    commentDepth = 0;
    commentStart = getTokenStart();
            }
          case 136: break;
          case 57: 
            { return HS_PRAGMA_START;
            }
          case 137: break;
          case 58: 
            { haddockDepth++;
            }
          case 138: break;
          case 59: 
            { return HS_DATA;
            }
          case 139: break;
          case 60: 
            { return HS_ELSE;
            }
          case 140: break;
          case 61: 
            { return HS_CASE;
            }
          case 141: break;
          case 62: 
            { return HS_HADDOCK;
            }
          case 142: break;
          case 63: 
            { yybegin(NHADDOCK);
    haddockDepth = 0;
    haddockStart = getTokenStart();
            }
          case 143: break;
          case 64: 
            { return HS_TYPE;
            }
          case 144: break;
          case 65: 
            { return HS_THEN;
            }
          case 145: break;
          case 66: 
            { return HS_INFIX;
            }
          case 146: break;
          case 67: 
            { return HS_CLASS;
            }
          case 147: break;
          case 68: 
            { return HS_WHERE;
            }
          case 148: break;
          case 69: 
            { return HS_INFIXL;
            }
          case 149: break;
          case 70: 
            { return HS_INFIXR;
            }
          case 150: break;
          case 71: 
            { return HS_IMPORT;
            }
          case 151: break;
          case 72: 
            { return HS_MODULE;
            }
          case 152: break;
          case 73: 
            { return HS_DEFAULT;
            }
          case 153: break;
          case 74: 
            { return HS_NEWTYPE;
            }
          case 154: break;
          case 75: 
            { return HS_INSTANCE;
            }
          case 155: break;
          case 76: 
            { return HS_DERIVING;
            }
          case 156: break;
          case 77: 
            { return HS_TYPE_FAMILY;
            }
          case 157: break;
          case 78: 
            { return HS_TYPE_INSTANCE;
            }
          case 158: break;
          case 79: 
            { return HS_FOREIGN_IMPORT;
            }
          case 159: break;
          case 80: 
            { return HS_FOREIGN_EXPORT;
            }
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
