{
  generate=[java="8" names="long"]

  parserClass="intellij.haskell.alex.lang.parser.AlexParser"

  implements="intellij.haskell.alex.lang.psi.AlexElement"
  extends="intellij.haskell.alex.lang.psi.impl.AlexElementImpl"

  psiClassPrefix="Alex"
  psiImplClassSuffix="Impl"
  psiPackage="intellij.haskell.alex.lang.psi"
  psiImplPackage="intellij.haskell.alex.lang.psi.impl"

  elementTypeHolderClass="intellij.haskell.alex.lang.psi.AlexTypes"
  elementTypePrefix="ALEX_"
  elementTypeClass="intellij.haskell.alex.lang.psi.AlexTokenType"
  tokenTypeClass="intellij.haskell.alex.lang.psi.AlexTokenType"
}

alex_file ::=
 (top_module_section endOfLine+)
 (wrapper_type endOfLine+)?
 (declarations_section)
 (tokens_section endOfLine+)
 (user_code_section endOfLine*) {
  pin=1
}

private endOfLine ::= EOL

declarations_section ::= (declaration endOfLine+)*
declaration ::= token_set_declaration | rule_declaration

regex_part ::= REGEX_PART_TOKEN
regex ::= (regex_part | DOLLAR_AND_IDENTIFIER)*
token_set_declaration ::= DOLLAR_AND_IDENTIFIER EQUAL regex {
  pin=1
}

rule_declaration ::= EMAIL_AND_IDENTIFIER EQUAL regex {
  pin=1
}

top_module_section ::=
 SOMETHING_IS_GONNA_HAPPEN
 (SOMETHING_IS_HAPPENING | endOfLine)*
 SOMETHING_HAS_ALREADY_HAPPENED {
  pin=1
  mixin='intellij.haskell.alex.lang.psi.impl.AlexHaskellCodeInjectionHost'
}

wrapper_type ::= WRAPPER_TYPE_IS_GONNA_BE_HERE STRING {
  pin=1
}

tokens_section ::= TOKENS A_SYMBOL_FOLLOWED_BY_TOKENS {
  pin=1
}

user_code_section ::=
 SOMETHING_IS_GONNA_HAPPEN
 (SOMETHING_IS_HAPPENING | endOfLine)*
 SOMETHING_HAS_ALREADY_HAPPENED {
  pin=1
  mixin='intellij.haskell.alex.lang.psi.impl.AlexHaskellCodeInjectionHost'
}
